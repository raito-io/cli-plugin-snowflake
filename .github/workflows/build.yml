name: Raito CLI - Snowflake Plugin - Build
on:
  push:
    branches:
      - "main"
  pull_request:
permissions:
  id-token: write
  contents: read
jobs:
  remove-old-infra:
    name: "Remove old infrastructure"
    uses: ./.github/workflows/destroy-roles.yml
    with:
      targetEnvironment: integration_testing
    secrets: inherit

  setup-infra:
    name: "Setup infrastructure"
    uses: ./.github/workflows/generate-infra.yml
    with:
      targetEnvironment: integration_testing
      demo-infra: false
      testing-infra: true
    secrets: inherit

    needs:
      - remove-old-infra
    if: always()

  generate-usage:
    name: "Generate usage"
    uses: ./.github/workflows/generate-usage.yml
    with:
      targetEnvironment: integration_testing
    secrets: inherit

    needs:
      - setup-infra

  lint:
    name: "Linting"
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true
          cache: true

      - name: Mod Tidy
        run: go mod tidy

      - name: Lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.0.1
          only-new-issues: true

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Lint
        run: terraform fmt -check=true -recursive
        working-directory: .infra/infra

  build:
    name: "Build"
    environment: integration_testing
    runs-on: ubuntu-latest

    needs:
      - setup-infra
      - generate-usage
      - lint

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Assume role using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_OIDC_DEPLOY_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod
          check-latest: true
          cache: true

      - name: Mod Tidy
        run: go mod tidy

      - name: Build
        run: make build

      - name: Store private key to file
        shell: bash
        run: echo "${{ secrets.SNOWFLAKE_PRIVATE_KEY }}" > /tmp/snowflake_private_key.pem

      - name: Test
        run: make test
        env:
          SF_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SF_ORGANIZATION: ${{ secrets.SNOWFLAKE_ORGANIZATION }}
          SF_USER: ${{ secrets.SNOWFLAKE_USER }}
          SF_PRIVATE_KEY: /tmp/snowflake_private_key.pem
          SF_ROLE: ${{ secrets.sf_role }}
          SF_STANDARD_EDITION: false

      - uses: codecov/codecov-action@v5
        if: ${{ !cancelled() }}
        name: Upload coverage to Codecov
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.txt

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./junit-tests.xml

#  cleanup:
#    needs:
#      - setup-infra
#      - build
#    if: always() && needs.setup-infra.result == 'success'
#
#    uses: ./.github/workflows/destroy-infra.yml
#    with:
#      targetEnvironment: integration_testing
#    secrets: inherit

