// Code generated by mockery v2.14.0. DO NOT EDIT.

package snowflake

import (
	common "github.com/raito-io/cli-plugin-snowflake/common"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// mockDataSourceRepository is an autogenerated mock type for the dataSourceRepository type
type mockDataSourceRepository struct {
	mock.Mock
}

type mockDataSourceRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDataSourceRepository) EXPECT() *mockDataSourceRepository_Expecter {
	return &mockDataSourceRepository_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *mockDataSourceRepository) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataSourceRepository_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type mockDataSourceRepository_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *mockDataSourceRepository_Expecter) Close() *mockDataSourceRepository_Close_Call {
	return &mockDataSourceRepository_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *mockDataSourceRepository_Close_Call) Run(run func()) *mockDataSourceRepository_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataSourceRepository_Close_Call) Return(_a0 error) *mockDataSourceRepository_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetColumnsInTable provides a mock function with given fields: sfObject
func (_m *mockDataSourceRepository) GetColumnsInTable(sfObject *common.SnowflakeObject) ([]DbEntity, error) {
	ret := _m.Called(sfObject)

	var r0 []DbEntity
	if rf, ok := ret.Get(0).(func(*common.SnowflakeObject) []DbEntity); ok {
		r0 = rf(sfObject)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DbEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*common.SnowflakeObject) error); ok {
		r1 = rf(sfObject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataSourceRepository_GetColumnsInTable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetColumnsInTable'
type mockDataSourceRepository_GetColumnsInTable_Call struct {
	*mock.Call
}

// GetColumnsInTable is a helper method to define mock.On call
//   - sfObject *common.SnowflakeObject
func (_e *mockDataSourceRepository_Expecter) GetColumnsInTable(sfObject interface{}) *mockDataSourceRepository_GetColumnsInTable_Call {
	return &mockDataSourceRepository_GetColumnsInTable_Call{Call: _e.mock.On("GetColumnsInTable", sfObject)}
}

func (_c *mockDataSourceRepository_GetColumnsInTable_Call) Run(run func(sfObject *common.SnowflakeObject)) *mockDataSourceRepository_GetColumnsInTable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.SnowflakeObject))
	})
	return _c
}

func (_c *mockDataSourceRepository_GetColumnsInTable_Call) Return(_a0 []DbEntity, _a1 error) *mockDataSourceRepository_GetColumnsInTable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetDataBases provides a mock function with given fields:
func (_m *mockDataSourceRepository) GetDataBases() ([]DbEntity, error) {
	ret := _m.Called()

	var r0 []DbEntity
	if rf, ok := ret.Get(0).(func() []DbEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DbEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataSourceRepository_GetDataBases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataBases'
type mockDataSourceRepository_GetDataBases_Call struct {
	*mock.Call
}

// GetDataBases is a helper method to define mock.On call
func (_e *mockDataSourceRepository_Expecter) GetDataBases() *mockDataSourceRepository_GetDataBases_Call {
	return &mockDataSourceRepository_GetDataBases_Call{Call: _e.mock.On("GetDataBases")}
}

func (_c *mockDataSourceRepository_GetDataBases_Call) Run(run func()) *mockDataSourceRepository_GetDataBases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataSourceRepository_GetDataBases_Call) Return(_a0 []DbEntity, _a1 error) *mockDataSourceRepository_GetDataBases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetSchemaInDatabase provides a mock function with given fields: databaseName
func (_m *mockDataSourceRepository) GetSchemaInDatabase(databaseName string) ([]DbEntity, error) {
	ret := _m.Called(databaseName)

	var r0 []DbEntity
	if rf, ok := ret.Get(0).(func(string) []DbEntity); ok {
		r0 = rf(databaseName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DbEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(databaseName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataSourceRepository_GetSchemaInDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchemaInDatabase'
type mockDataSourceRepository_GetSchemaInDatabase_Call struct {
	*mock.Call
}

// GetSchemaInDatabase is a helper method to define mock.On call
//   - databaseName string
func (_e *mockDataSourceRepository_Expecter) GetSchemaInDatabase(databaseName interface{}) *mockDataSourceRepository_GetSchemaInDatabase_Call {
	return &mockDataSourceRepository_GetSchemaInDatabase_Call{Call: _e.mock.On("GetSchemaInDatabase", databaseName)}
}

func (_c *mockDataSourceRepository_GetSchemaInDatabase_Call) Run(run func(databaseName string)) *mockDataSourceRepository_GetSchemaInDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataSourceRepository_GetSchemaInDatabase_Call) Return(_a0 []DbEntity, _a1 error) *mockDataSourceRepository_GetSchemaInDatabase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetShares provides a mock function with given fields:
func (_m *mockDataSourceRepository) GetShares() ([]DbEntity, error) {
	ret := _m.Called()

	var r0 []DbEntity
	if rf, ok := ret.Get(0).(func() []DbEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DbEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataSourceRepository_GetShares_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShares'
type mockDataSourceRepository_GetShares_Call struct {
	*mock.Call
}

// GetShares is a helper method to define mock.On call
func (_e *mockDataSourceRepository_Expecter) GetShares() *mockDataSourceRepository_GetShares_Call {
	return &mockDataSourceRepository_GetShares_Call{Call: _e.mock.On("GetShares")}
}

func (_c *mockDataSourceRepository_GetShares_Call) Run(run func()) *mockDataSourceRepository_GetShares_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataSourceRepository_GetShares_Call) Return(_a0 []DbEntity, _a1 error) *mockDataSourceRepository_GetShares_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetSnowFlakeAccountName provides a mock function with given fields:
func (_m *mockDataSourceRepository) GetSnowFlakeAccountName() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataSourceRepository_GetSnowFlakeAccountName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSnowFlakeAccountName'
type mockDataSourceRepository_GetSnowFlakeAccountName_Call struct {
	*mock.Call
}

// GetSnowFlakeAccountName is a helper method to define mock.On call
func (_e *mockDataSourceRepository_Expecter) GetSnowFlakeAccountName() *mockDataSourceRepository_GetSnowFlakeAccountName_Call {
	return &mockDataSourceRepository_GetSnowFlakeAccountName_Call{Call: _e.mock.On("GetSnowFlakeAccountName")}
}

func (_c *mockDataSourceRepository_GetSnowFlakeAccountName_Call) Run(run func()) *mockDataSourceRepository_GetSnowFlakeAccountName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataSourceRepository_GetSnowFlakeAccountName_Call) Return(_a0 string, _a1 error) *mockDataSourceRepository_GetSnowFlakeAccountName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTablesInSchema provides a mock function with given fields: sfObject
func (_m *mockDataSourceRepository) GetTablesInSchema(sfObject *common.SnowflakeObject) ([]DbEntity, error) {
	ret := _m.Called(sfObject)

	var r0 []DbEntity
	if rf, ok := ret.Get(0).(func(*common.SnowflakeObject) []DbEntity); ok {
		r0 = rf(sfObject)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DbEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*common.SnowflakeObject) error); ok {
		r1 = rf(sfObject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataSourceRepository_GetTablesInSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTablesInSchema'
type mockDataSourceRepository_GetTablesInSchema_Call struct {
	*mock.Call
}

// GetTablesInSchema is a helper method to define mock.On call
//   - sfObject *common.SnowflakeObject
func (_e *mockDataSourceRepository_Expecter) GetTablesInSchema(sfObject interface{}) *mockDataSourceRepository_GetTablesInSchema_Call {
	return &mockDataSourceRepository_GetTablesInSchema_Call{Call: _e.mock.On("GetTablesInSchema", sfObject)}
}

func (_c *mockDataSourceRepository_GetTablesInSchema_Call) Run(run func(sfObject *common.SnowflakeObject)) *mockDataSourceRepository_GetTablesInSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.SnowflakeObject))
	})
	return _c
}

func (_c *mockDataSourceRepository_GetTablesInSchema_Call) Return(_a0 []DbEntity, _a1 error) *mockDataSourceRepository_GetTablesInSchema_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetViewsInSchema provides a mock function with given fields: sfObject
func (_m *mockDataSourceRepository) GetViewsInSchema(sfObject *common.SnowflakeObject) ([]DbEntity, error) {
	ret := _m.Called(sfObject)

	var r0 []DbEntity
	if rf, ok := ret.Get(0).(func(*common.SnowflakeObject) []DbEntity); ok {
		r0 = rf(sfObject)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DbEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*common.SnowflakeObject) error); ok {
		r1 = rf(sfObject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataSourceRepository_GetViewsInSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetViewsInSchema'
type mockDataSourceRepository_GetViewsInSchema_Call struct {
	*mock.Call
}

// GetViewsInSchema is a helper method to define mock.On call
//   - sfObject *common.SnowflakeObject
func (_e *mockDataSourceRepository_Expecter) GetViewsInSchema(sfObject interface{}) *mockDataSourceRepository_GetViewsInSchema_Call {
	return &mockDataSourceRepository_GetViewsInSchema_Call{Call: _e.mock.On("GetViewsInSchema", sfObject)}
}

func (_c *mockDataSourceRepository_GetViewsInSchema_Call) Run(run func(sfObject *common.SnowflakeObject)) *mockDataSourceRepository_GetViewsInSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.SnowflakeObject))
	})
	return _c
}

func (_c *mockDataSourceRepository_GetViewsInSchema_Call) Return(_a0 []DbEntity, _a1 error) *mockDataSourceRepository_GetViewsInSchema_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetWarehouses provides a mock function with given fields:
func (_m *mockDataSourceRepository) GetWarehouses() ([]DbEntity, error) {
	ret := _m.Called()

	var r0 []DbEntity
	if rf, ok := ret.Get(0).(func() []DbEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DbEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataSourceRepository_GetWarehouses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWarehouses'
type mockDataSourceRepository_GetWarehouses_Call struct {
	*mock.Call
}

// GetWarehouses is a helper method to define mock.On call
func (_e *mockDataSourceRepository_Expecter) GetWarehouses() *mockDataSourceRepository_GetWarehouses_Call {
	return &mockDataSourceRepository_GetWarehouses_Call{Call: _e.mock.On("GetWarehouses")}
}

func (_c *mockDataSourceRepository_GetWarehouses_Call) Run(run func()) *mockDataSourceRepository_GetWarehouses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataSourceRepository_GetWarehouses_Call) Return(_a0 []DbEntity, _a1 error) *mockDataSourceRepository_GetWarehouses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// TotalQueryTime provides a mock function with given fields:
func (_m *mockDataSourceRepository) TotalQueryTime() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// mockDataSourceRepository_TotalQueryTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalQueryTime'
type mockDataSourceRepository_TotalQueryTime_Call struct {
	*mock.Call
}

// TotalQueryTime is a helper method to define mock.On call
func (_e *mockDataSourceRepository_Expecter) TotalQueryTime() *mockDataSourceRepository_TotalQueryTime_Call {
	return &mockDataSourceRepository_TotalQueryTime_Call{Call: _e.mock.On("TotalQueryTime")}
}

func (_c *mockDataSourceRepository_TotalQueryTime_Call) Run(run func()) *mockDataSourceRepository_TotalQueryTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataSourceRepository_TotalQueryTime_Call) Return(_a0 time.Duration) *mockDataSourceRepository_TotalQueryTime_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTnewMockDataSourceRepository interface {
	mock.TestingT
	Cleanup(func())
}

// newMockDataSourceRepository creates a new instance of mockDataSourceRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockDataSourceRepository(t mockConstructorTestingTnewMockDataSourceRepository) *mockDataSourceRepository {
	mock := &mockDataSourceRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
