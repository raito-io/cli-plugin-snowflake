// Code generated by mockery v2.14.0. DO NOT EDIT.

package snowflake

import (
	context "context"

	common "github.com/raito-io/cli-plugin-snowflake/common"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// mockDataAccessRepository is an autogenerated mock type for the dataAccessRepository type
type mockDataAccessRepository struct {
	mock.Mock
}

type mockDataAccessRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDataAccessRepository) EXPECT() *mockDataAccessRepository_Expecter {
	return &mockDataAccessRepository_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *mockDataAccessRepository) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type mockDataAccessRepository_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *mockDataAccessRepository_Expecter) Close() *mockDataAccessRepository_Close_Call {
	return &mockDataAccessRepository_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *mockDataAccessRepository_Close_Call) Run(run func()) *mockDataAccessRepository_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataAccessRepository_Close_Call) Return(_a0 error) *mockDataAccessRepository_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

// CommentIfExists provides a mock function with given fields: comment, objectType, objectName
func (_m *mockDataAccessRepository) CommentIfExists(comment string, objectType string, objectName string) error {
	ret := _m.Called(comment, objectType, objectName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(comment, objectType, objectName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_CommentIfExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommentIfExists'
type mockDataAccessRepository_CommentIfExists_Call struct {
	*mock.Call
}

// CommentIfExists is a helper method to define mock.On call
//   - comment string
//   - objectType string
//   - objectName string
func (_e *mockDataAccessRepository_Expecter) CommentIfExists(comment interface{}, objectType interface{}, objectName interface{}) *mockDataAccessRepository_CommentIfExists_Call {
	return &mockDataAccessRepository_CommentIfExists_Call{Call: _e.mock.On("CommentIfExists", comment, objectType, objectName)}
}

func (_c *mockDataAccessRepository_CommentIfExists_Call) Run(run func(comment string, objectType string, objectName string)) *mockDataAccessRepository_CommentIfExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_CommentIfExists_Call) Return(_a0 error) *mockDataAccessRepository_CommentIfExists_Call {
	_c.Call.Return(_a0)
	return _c
}

// CreateRole provides a mock function with given fields: roleName, comment
func (_m *mockDataAccessRepository) CreateRole(roleName string, comment string) error {
	ret := _m.Called(roleName, comment)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(roleName, comment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_CreateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRole'
type mockDataAccessRepository_CreateRole_Call struct {
	*mock.Call
}

// CreateRole is a helper method to define mock.On call
//   - roleName string
//   - comment string
func (_e *mockDataAccessRepository_Expecter) CreateRole(roleName interface{}, comment interface{}) *mockDataAccessRepository_CreateRole_Call {
	return &mockDataAccessRepository_CreateRole_Call{Call: _e.mock.On("CreateRole", roleName, comment)}
}

func (_c *mockDataAccessRepository_CreateRole_Call) Run(run func(roleName string, comment string)) *mockDataAccessRepository_CreateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_CreateRole_Call) Return(_a0 error) *mockDataAccessRepository_CreateRole_Call {
	_c.Call.Return(_a0)
	return _c
}

// DescribePolicy provides a mock function with given fields: policyType, dbName, schema, policyName
func (_m *mockDataAccessRepository) DescribePolicy(policyType string, dbName string, schema string, policyName string) ([]desribePolicyEntity, error) {
	ret := _m.Called(policyType, dbName, schema, policyName)

	var r0 []desribePolicyEntity
	if rf, ok := ret.Get(0).(func(string, string, string, string) []desribePolicyEntity); ok {
		r0 = rf(policyType, dbName, schema, policyName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]desribePolicyEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(policyType, dbName, schema, policyName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_DescribePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribePolicy'
type mockDataAccessRepository_DescribePolicy_Call struct {
	*mock.Call
}

// DescribePolicy is a helper method to define mock.On call
//   - policyType string
//   - dbName string
//   - schema string
//   - policyName string
func (_e *mockDataAccessRepository_Expecter) DescribePolicy(policyType interface{}, dbName interface{}, schema interface{}, policyName interface{}) *mockDataAccessRepository_DescribePolicy_Call {
	return &mockDataAccessRepository_DescribePolicy_Call{Call: _e.mock.On("DescribePolicy", policyType, dbName, schema, policyName)}
}

func (_c *mockDataAccessRepository_DescribePolicy_Call) Run(run func(policyType string, dbName string, schema string, policyName string)) *mockDataAccessRepository_DescribePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_DescribePolicy_Call) Return(_a0 []desribePolicyEntity, _a1 error) *mockDataAccessRepository_DescribePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DropRole provides a mock function with given fields: roleName
func (_m *mockDataAccessRepository) DropRole(roleName string) error {
	ret := _m.Called(roleName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_DropRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropRole'
type mockDataAccessRepository_DropRole_Call struct {
	*mock.Call
}

// DropRole is a helper method to define mock.On call
//   - roleName string
func (_e *mockDataAccessRepository_Expecter) DropRole(roleName interface{}) *mockDataAccessRepository_DropRole_Call {
	return &mockDataAccessRepository_DropRole_Call{Call: _e.mock.On("DropRole", roleName)}
}

func (_c *mockDataAccessRepository_DropRole_Call) Run(run func(roleName string)) *mockDataAccessRepository_DropRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_DropRole_Call) Return(_a0 error) *mockDataAccessRepository_DropRole_Call {
	_c.Call.Return(_a0)
	return _c
}

// ExecuteGrant provides a mock function with given fields: perm, on, role
func (_m *mockDataAccessRepository) ExecuteGrant(perm string, on string, role string) error {
	ret := _m.Called(perm, on, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(perm, on, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_ExecuteGrant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteGrant'
type mockDataAccessRepository_ExecuteGrant_Call struct {
	*mock.Call
}

// ExecuteGrant is a helper method to define mock.On call
//   - perm string
//   - on string
//   - role string
func (_e *mockDataAccessRepository_Expecter) ExecuteGrant(perm interface{}, on interface{}, role interface{}) *mockDataAccessRepository_ExecuteGrant_Call {
	return &mockDataAccessRepository_ExecuteGrant_Call{Call: _e.mock.On("ExecuteGrant", perm, on, role)}
}

func (_c *mockDataAccessRepository_ExecuteGrant_Call) Run(run func(perm string, on string, role string)) *mockDataAccessRepository_ExecuteGrant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_ExecuteGrant_Call) Return(_a0 error) *mockDataAccessRepository_ExecuteGrant_Call {
	_c.Call.Return(_a0)
	return _c
}

// ExecuteRevoke provides a mock function with given fields: perm, on, role
func (_m *mockDataAccessRepository) ExecuteRevoke(perm string, on string, role string) error {
	ret := _m.Called(perm, on, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(perm, on, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_ExecuteRevoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteRevoke'
type mockDataAccessRepository_ExecuteRevoke_Call struct {
	*mock.Call
}

// ExecuteRevoke is a helper method to define mock.On call
//   - perm string
//   - on string
//   - role string
func (_e *mockDataAccessRepository_Expecter) ExecuteRevoke(perm interface{}, on interface{}, role interface{}) *mockDataAccessRepository_ExecuteRevoke_Call {
	return &mockDataAccessRepository_ExecuteRevoke_Call{Call: _e.mock.On("ExecuteRevoke", perm, on, role)}
}

func (_c *mockDataAccessRepository_ExecuteRevoke_Call) Run(run func(perm string, on string, role string)) *mockDataAccessRepository_ExecuteRevoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_ExecuteRevoke_Call) Return(_a0 error) *mockDataAccessRepository_ExecuteRevoke_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetGrantsOfRole provides a mock function with given fields: roleName
func (_m *mockDataAccessRepository) GetGrantsOfRole(roleName string) ([]GrantOfRole, error) {
	ret := _m.Called(roleName)

	var r0 []GrantOfRole
	if rf, ok := ret.Get(0).(func(string) []GrantOfRole); ok {
		r0 = rf(roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GrantOfRole)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetGrantsOfRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGrantsOfRole'
type mockDataAccessRepository_GetGrantsOfRole_Call struct {
	*mock.Call
}

// GetGrantsOfRole is a helper method to define mock.On call
//   - roleName string
func (_e *mockDataAccessRepository_Expecter) GetGrantsOfRole(roleName interface{}) *mockDataAccessRepository_GetGrantsOfRole_Call {
	return &mockDataAccessRepository_GetGrantsOfRole_Call{Call: _e.mock.On("GetGrantsOfRole", roleName)}
}

func (_c *mockDataAccessRepository_GetGrantsOfRole_Call) Run(run func(roleName string)) *mockDataAccessRepository_GetGrantsOfRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetGrantsOfRole_Call) Return(_a0 []GrantOfRole, _a1 error) *mockDataAccessRepository_GetGrantsOfRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetGrantsToRole provides a mock function with given fields: roleName
func (_m *mockDataAccessRepository) GetGrantsToRole(roleName string) ([]GrantToRole, error) {
	ret := _m.Called(roleName)

	var r0 []GrantToRole
	if rf, ok := ret.Get(0).(func(string) []GrantToRole); ok {
		r0 = rf(roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GrantToRole)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetGrantsToRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGrantsToRole'
type mockDataAccessRepository_GetGrantsToRole_Call struct {
	*mock.Call
}

// GetGrantsToRole is a helper method to define mock.On call
//   - roleName string
func (_e *mockDataAccessRepository_Expecter) GetGrantsToRole(roleName interface{}) *mockDataAccessRepository_GetGrantsToRole_Call {
	return &mockDataAccessRepository_GetGrantsToRole_Call{Call: _e.mock.On("GetGrantsToRole", roleName)}
}

func (_c *mockDataAccessRepository_GetGrantsToRole_Call) Run(run func(roleName string)) *mockDataAccessRepository_GetGrantsToRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetGrantsToRole_Call) Return(_a0 []GrantToRole, _a1 error) *mockDataAccessRepository_GetGrantsToRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetPolicies provides a mock function with given fields: policy
func (_m *mockDataAccessRepository) GetPolicies(policy string) ([]policyEntity, error) {
	ret := _m.Called(policy)

	var r0 []policyEntity
	if rf, ok := ret.Get(0).(func(string) []policyEntity); ok {
		r0 = rf(policy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]policyEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(policy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicies'
type mockDataAccessRepository_GetPolicies_Call struct {
	*mock.Call
}

// GetPolicies is a helper method to define mock.On call
//   - policy string
func (_e *mockDataAccessRepository_Expecter) GetPolicies(policy interface{}) *mockDataAccessRepository_GetPolicies_Call {
	return &mockDataAccessRepository_GetPolicies_Call{Call: _e.mock.On("GetPolicies", policy)}
}

func (_c *mockDataAccessRepository_GetPolicies_Call) Run(run func(policy string)) *mockDataAccessRepository_GetPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetPolicies_Call) Return(_a0 []policyEntity, _a1 error) *mockDataAccessRepository_GetPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetPolicyReferences provides a mock function with given fields: dbName, schema, policyName
func (_m *mockDataAccessRepository) GetPolicyReferences(dbName string, schema string, policyName string) ([]policyReferenceEntity, error) {
	ret := _m.Called(dbName, schema, policyName)

	var r0 []policyReferenceEntity
	if rf, ok := ret.Get(0).(func(string, string, string) []policyReferenceEntity); ok {
		r0 = rf(dbName, schema, policyName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]policyReferenceEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(dbName, schema, policyName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetPolicyReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyReferences'
type mockDataAccessRepository_GetPolicyReferences_Call struct {
	*mock.Call
}

// GetPolicyReferences is a helper method to define mock.On call
//   - dbName string
//   - schema string
//   - policyName string
func (_e *mockDataAccessRepository_Expecter) GetPolicyReferences(dbName interface{}, schema interface{}, policyName interface{}) *mockDataAccessRepository_GetPolicyReferences_Call {
	return &mockDataAccessRepository_GetPolicyReferences_Call{Call: _e.mock.On("GetPolicyReferences", dbName, schema, policyName)}
}

func (_c *mockDataAccessRepository_GetPolicyReferences_Call) Run(run func(dbName string, schema string, policyName string)) *mockDataAccessRepository_GetPolicyReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetPolicyReferences_Call) Return(_a0 []policyReferenceEntity, _a1 error) *mockDataAccessRepository_GetPolicyReferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetRoles provides a mock function with given fields:
func (_m *mockDataAccessRepository) GetRoles() ([]RoleEntity, error) {
	ret := _m.Called()

	var r0 []RoleEntity
	if rf, ok := ret.Get(0).(func() []RoleEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RoleEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoles'
type mockDataAccessRepository_GetRoles_Call struct {
	*mock.Call
}

// GetRoles is a helper method to define mock.On call
func (_e *mockDataAccessRepository_Expecter) GetRoles() *mockDataAccessRepository_GetRoles_Call {
	return &mockDataAccessRepository_GetRoles_Call{Call: _e.mock.On("GetRoles")}
}

func (_c *mockDataAccessRepository_GetRoles_Call) Run(run func()) *mockDataAccessRepository_GetRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataAccessRepository_GetRoles_Call) Return(_a0 []RoleEntity, _a1 error) *mockDataAccessRepository_GetRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetRolesWithPrefix provides a mock function with given fields: prefix
func (_m *mockDataAccessRepository) GetRolesWithPrefix(prefix string) ([]RoleEntity, error) {
	ret := _m.Called(prefix)

	var r0 []RoleEntity
	if rf, ok := ret.Get(0).(func(string) []RoleEntity); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RoleEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetRolesWithPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRolesWithPrefix'
type mockDataAccessRepository_GetRolesWithPrefix_Call struct {
	*mock.Call
}

// GetRolesWithPrefix is a helper method to define mock.On call
//   - prefix string
func (_e *mockDataAccessRepository_Expecter) GetRolesWithPrefix(prefix interface{}) *mockDataAccessRepository_GetRolesWithPrefix_Call {
	return &mockDataAccessRepository_GetRolesWithPrefix_Call{Call: _e.mock.On("GetRolesWithPrefix", prefix)}
}

func (_c *mockDataAccessRepository_GetRolesWithPrefix_Call) Run(run func(prefix string)) *mockDataAccessRepository_GetRolesWithPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetRolesWithPrefix_Call) Return(_a0 []RoleEntity, _a1 error) *mockDataAccessRepository_GetRolesWithPrefix_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetSchemaInDatabase provides a mock function with given fields: databaseName
func (_m *mockDataAccessRepository) GetSchemaInDatabase(databaseName string) ([]DbEntity, error) {
	ret := _m.Called(databaseName)

	var r0 []DbEntity
	if rf, ok := ret.Get(0).(func(string) []DbEntity); ok {
		r0 = rf(databaseName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DbEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(databaseName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetSchemaInDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchemaInDatabase'
type mockDataAccessRepository_GetSchemaInDatabase_Call struct {
	*mock.Call
}

// GetSchemaInDatabase is a helper method to define mock.On call
//   - databaseName string
func (_e *mockDataAccessRepository_Expecter) GetSchemaInDatabase(databaseName interface{}) *mockDataAccessRepository_GetSchemaInDatabase_Call {
	return &mockDataAccessRepository_GetSchemaInDatabase_Call{Call: _e.mock.On("GetSchemaInDatabase", databaseName)}
}

func (_c *mockDataAccessRepository_GetSchemaInDatabase_Call) Run(run func(databaseName string)) *mockDataAccessRepository_GetSchemaInDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetSchemaInDatabase_Call) Return(_a0 []DbEntity, _a1 error) *mockDataAccessRepository_GetSchemaInDatabase_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetShares provides a mock function with given fields:
func (_m *mockDataAccessRepository) GetShares() ([]DbEntity, error) {
	ret := _m.Called()

	var r0 []DbEntity
	if rf, ok := ret.Get(0).(func() []DbEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DbEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetShares_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShares'
type mockDataAccessRepository_GetShares_Call struct {
	*mock.Call
}

// GetShares is a helper method to define mock.On call
func (_e *mockDataAccessRepository_Expecter) GetShares() *mockDataAccessRepository_GetShares_Call {
	return &mockDataAccessRepository_GetShares_Call{Call: _e.mock.On("GetShares")}
}

func (_c *mockDataAccessRepository_GetShares_Call) Run(run func()) *mockDataAccessRepository_GetShares_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataAccessRepository_GetShares_Call) Return(_a0 []DbEntity, _a1 error) *mockDataAccessRepository_GetShares_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetTablesInSchema provides a mock function with given fields: sfObject
func (_m *mockDataAccessRepository) GetTablesInSchema(sfObject *common.SnowflakeObject) ([]DbEntity, error) {
	ret := _m.Called(sfObject)

	var r0 []DbEntity
	if rf, ok := ret.Get(0).(func(*common.SnowflakeObject) []DbEntity); ok {
		r0 = rf(sfObject)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DbEntity)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*common.SnowflakeObject) error); ok {
		r1 = rf(sfObject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetTablesInSchema_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTablesInSchema'
type mockDataAccessRepository_GetTablesInSchema_Call struct {
	*mock.Call
}

// GetTablesInSchema is a helper method to define mock.On call
//   - sfObject *common.SnowflakeObject
func (_e *mockDataAccessRepository_Expecter) GetTablesInSchema(sfObject interface{}) *mockDataAccessRepository_GetTablesInSchema_Call {
	return &mockDataAccessRepository_GetTablesInSchema_Call{Call: _e.mock.On("GetTablesInSchema", sfObject)}
}

func (_c *mockDataAccessRepository_GetTablesInSchema_Call) Run(run func(sfObject *common.SnowflakeObject)) *mockDataAccessRepository_GetTablesInSchema_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*common.SnowflakeObject))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetTablesInSchema_Call) Return(_a0 []DbEntity, _a1 error) *mockDataAccessRepository_GetTablesInSchema_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GrantRolesToRole provides a mock function with given fields: ctx, role, roles
func (_m *mockDataAccessRepository) GrantRolesToRole(ctx context.Context, role string, roles ...string) error {
	_va := make([]interface{}, len(roles))
	for _i := range roles {
		_va[_i] = roles[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, role)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) error); ok {
		r0 = rf(ctx, role, roles...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_GrantRolesToRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantRolesToRole'
type mockDataAccessRepository_GrantRolesToRole_Call struct {
	*mock.Call
}

// GrantRolesToRole is a helper method to define mock.On call
//   - ctx context.Context
//   - role string
//   - roles ...string
func (_e *mockDataAccessRepository_Expecter) GrantRolesToRole(ctx interface{}, role interface{}, roles ...interface{}) *mockDataAccessRepository_GrantRolesToRole_Call {
	return &mockDataAccessRepository_GrantRolesToRole_Call{Call: _e.mock.On("GrantRolesToRole",
		append([]interface{}{ctx, role}, roles...)...)}
}

func (_c *mockDataAccessRepository_GrantRolesToRole_Call) Run(run func(ctx context.Context, role string, roles ...string)) *mockDataAccessRepository_GrantRolesToRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessRepository_GrantRolesToRole_Call) Return(_a0 error) *mockDataAccessRepository_GrantRolesToRole_Call {
	_c.Call.Return(_a0)
	return _c
}

// GrantUsersToRole provides a mock function with given fields: ctx, role, users
func (_m *mockDataAccessRepository) GrantUsersToRole(ctx context.Context, role string, users ...string) error {
	_va := make([]interface{}, len(users))
	for _i := range users {
		_va[_i] = users[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, role)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) error); ok {
		r0 = rf(ctx, role, users...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_GrantUsersToRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantUsersToRole'
type mockDataAccessRepository_GrantUsersToRole_Call struct {
	*mock.Call
}

// GrantUsersToRole is a helper method to define mock.On call
//   - ctx context.Context
//   - role string
//   - users ...string
func (_e *mockDataAccessRepository_Expecter) GrantUsersToRole(ctx interface{}, role interface{}, users ...interface{}) *mockDataAccessRepository_GrantUsersToRole_Call {
	return &mockDataAccessRepository_GrantUsersToRole_Call{Call: _e.mock.On("GrantUsersToRole",
		append([]interface{}{ctx, role}, users...)...)}
}

func (_c *mockDataAccessRepository_GrantUsersToRole_Call) Run(run func(ctx context.Context, role string, users ...string)) *mockDataAccessRepository_GrantUsersToRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessRepository_GrantUsersToRole_Call) Return(_a0 error) *mockDataAccessRepository_GrantUsersToRole_Call {
	_c.Call.Return(_a0)
	return _c
}

// RevokeRolesFromRole provides a mock function with given fields: ctx, role, roles
func (_m *mockDataAccessRepository) RevokeRolesFromRole(ctx context.Context, role string, roles ...string) error {
	_va := make([]interface{}, len(roles))
	for _i := range roles {
		_va[_i] = roles[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, role)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) error); ok {
		r0 = rf(ctx, role, roles...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_RevokeRolesFromRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeRolesFromRole'
type mockDataAccessRepository_RevokeRolesFromRole_Call struct {
	*mock.Call
}

// RevokeRolesFromRole is a helper method to define mock.On call
//   - ctx context.Context
//   - role string
//   - roles ...string
func (_e *mockDataAccessRepository_Expecter) RevokeRolesFromRole(ctx interface{}, role interface{}, roles ...interface{}) *mockDataAccessRepository_RevokeRolesFromRole_Call {
	return &mockDataAccessRepository_RevokeRolesFromRole_Call{Call: _e.mock.On("RevokeRolesFromRole",
		append([]interface{}{ctx, role}, roles...)...)}
}

func (_c *mockDataAccessRepository_RevokeRolesFromRole_Call) Run(run func(ctx context.Context, role string, roles ...string)) *mockDataAccessRepository_RevokeRolesFromRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessRepository_RevokeRolesFromRole_Call) Return(_a0 error) *mockDataAccessRepository_RevokeRolesFromRole_Call {
	_c.Call.Return(_a0)
	return _c
}

// RevokeUsersFromRole provides a mock function with given fields: ctx, role, users
func (_m *mockDataAccessRepository) RevokeUsersFromRole(ctx context.Context, role string, users ...string) error {
	_va := make([]interface{}, len(users))
	for _i := range users {
		_va[_i] = users[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, role)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) error); ok {
		r0 = rf(ctx, role, users...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_RevokeUsersFromRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeUsersFromRole'
type mockDataAccessRepository_RevokeUsersFromRole_Call struct {
	*mock.Call
}

// RevokeUsersFromRole is a helper method to define mock.On call
//   - ctx context.Context
//   - role string
//   - users ...string
func (_e *mockDataAccessRepository_Expecter) RevokeUsersFromRole(ctx interface{}, role interface{}, users ...interface{}) *mockDataAccessRepository_RevokeUsersFromRole_Call {
	return &mockDataAccessRepository_RevokeUsersFromRole_Call{Call: _e.mock.On("RevokeUsersFromRole",
		append([]interface{}{ctx, role}, users...)...)}
}

func (_c *mockDataAccessRepository_RevokeUsersFromRole_Call) Run(run func(ctx context.Context, role string, users ...string)) *mockDataAccessRepository_RevokeUsersFromRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessRepository_RevokeUsersFromRole_Call) Return(_a0 error) *mockDataAccessRepository_RevokeUsersFromRole_Call {
	_c.Call.Return(_a0)
	return _c
}

// TotalQueryTime provides a mock function with given fields:
func (_m *mockDataAccessRepository) TotalQueryTime() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// mockDataAccessRepository_TotalQueryTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalQueryTime'
type mockDataAccessRepository_TotalQueryTime_Call struct {
	*mock.Call
}

// TotalQueryTime is a helper method to define mock.On call
func (_e *mockDataAccessRepository_Expecter) TotalQueryTime() *mockDataAccessRepository_TotalQueryTime_Call {
	return &mockDataAccessRepository_TotalQueryTime_Call{Call: _e.mock.On("TotalQueryTime")}
}

func (_c *mockDataAccessRepository_TotalQueryTime_Call) Run(run func()) *mockDataAccessRepository_TotalQueryTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataAccessRepository_TotalQueryTime_Call) Return(_a0 time.Duration) *mockDataAccessRepository_TotalQueryTime_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTnewMockDataAccessRepository interface {
	mock.TestingT
	Cleanup(func())
}

// newMockDataAccessRepository creates a new instance of mockDataAccessRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newMockDataAccessRepository(t mockConstructorTestingTnewMockDataAccessRepository) *mockDataAccessRepository {
	mock := &mockDataAccessRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
