// Code generated by mockery v2.37.1. DO NOT EDIT.

package snowflake

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// mockDataAccessRepository is an autogenerated mock type for the dataAccessRepository type
type mockDataAccessRepository struct {
	mock.Mock
}

type mockDataAccessRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDataAccessRepository) EXPECT() *mockDataAccessRepository_Expecter {
	return &mockDataAccessRepository_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *mockDataAccessRepository) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type mockDataAccessRepository_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *mockDataAccessRepository_Expecter) Close() *mockDataAccessRepository_Close_Call {
	return &mockDataAccessRepository_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *mockDataAccessRepository_Close_Call) Run(run func()) *mockDataAccessRepository_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataAccessRepository_Close_Call) Return(_a0 error) *mockDataAccessRepository_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_Close_Call) RunAndReturn(run func() error) *mockDataAccessRepository_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CommentRoleIfExists provides a mock function with given fields: comment, objectName
func (_m *mockDataAccessRepository) CommentRoleIfExists(comment string, objectName string) error {
	ret := _m.Called(comment, objectName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(comment, objectName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_CommentRoleIfExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommentRoleIfExists'
type mockDataAccessRepository_CommentRoleIfExists_Call struct {
	*mock.Call
}

// CommentRoleIfExists is a helper method to define mock.On call
//   - comment string
//   - objectName string
func (_e *mockDataAccessRepository_Expecter) CommentRoleIfExists(comment interface{}, objectName interface{}) *mockDataAccessRepository_CommentRoleIfExists_Call {
	return &mockDataAccessRepository_CommentRoleIfExists_Call{Call: _e.mock.On("CommentRoleIfExists", comment, objectName)}
}

func (_c *mockDataAccessRepository_CommentRoleIfExists_Call) Run(run func(comment string, objectName string)) *mockDataAccessRepository_CommentRoleIfExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_CommentRoleIfExists_Call) Return(_a0 error) *mockDataAccessRepository_CommentRoleIfExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_CommentRoleIfExists_Call) RunAndReturn(run func(string, string) error) *mockDataAccessRepository_CommentRoleIfExists_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMaskPolicy provides a mock function with given fields: databaseName, schema, maskName, columnsFullName, maskType, beneficiaries
func (_m *mockDataAccessRepository) CreateMaskPolicy(databaseName string, schema string, maskName string, columnsFullName []string, maskType *string, beneficiaries *MaskingBeneficiaries) error {
	ret := _m.Called(databaseName, schema, maskName, columnsFullName, maskType, beneficiaries)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, []string, *string, *MaskingBeneficiaries) error); ok {
		r0 = rf(databaseName, schema, maskName, columnsFullName, maskType, beneficiaries)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_CreateMaskPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMaskPolicy'
type mockDataAccessRepository_CreateMaskPolicy_Call struct {
	*mock.Call
}

// CreateMaskPolicy is a helper method to define mock.On call
//   - databaseName string
//   - schema string
//   - maskName string
//   - columnsFullName []string
//   - maskType *string
//   - beneficiaries *MaskingBeneficiaries
func (_e *mockDataAccessRepository_Expecter) CreateMaskPolicy(databaseName interface{}, schema interface{}, maskName interface{}, columnsFullName interface{}, maskType interface{}, beneficiaries interface{}) *mockDataAccessRepository_CreateMaskPolicy_Call {
	return &mockDataAccessRepository_CreateMaskPolicy_Call{Call: _e.mock.On("CreateMaskPolicy", databaseName, schema, maskName, columnsFullName, maskType, beneficiaries)}
}

func (_c *mockDataAccessRepository_CreateMaskPolicy_Call) Run(run func(databaseName string, schema string, maskName string, columnsFullName []string, maskType *string, beneficiaries *MaskingBeneficiaries)) *mockDataAccessRepository_CreateMaskPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].([]string), args[4].(*string), args[5].(*MaskingBeneficiaries))
	})
	return _c
}

func (_c *mockDataAccessRepository_CreateMaskPolicy_Call) Return(_a0 error) *mockDataAccessRepository_CreateMaskPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_CreateMaskPolicy_Call) RunAndReturn(run func(string, string, string, []string, *string, *MaskingBeneficiaries) error) *mockDataAccessRepository_CreateMaskPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRole provides a mock function with given fields: roleName
func (_m *mockDataAccessRepository) CreateRole(roleName string) error {
	ret := _m.Called(roleName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_CreateRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRole'
type mockDataAccessRepository_CreateRole_Call struct {
	*mock.Call
}

// CreateRole is a helper method to define mock.On call
//   - roleName string
func (_e *mockDataAccessRepository_Expecter) CreateRole(roleName interface{}) *mockDataAccessRepository_CreateRole_Call {
	return &mockDataAccessRepository_CreateRole_Call{Call: _e.mock.On("CreateRole", roleName)}
}

func (_c *mockDataAccessRepository_CreateRole_Call) Run(run func(roleName string)) *mockDataAccessRepository_CreateRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_CreateRole_Call) Return(_a0 error) *mockDataAccessRepository_CreateRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_CreateRole_Call) RunAndReturn(run func(string) error) *mockDataAccessRepository_CreateRole_Call {
	_c.Call.Return(run)
	return _c
}

// DescribePolicy provides a mock function with given fields: policyType, dbName, schema, policyName
func (_m *mockDataAccessRepository) DescribePolicy(policyType string, dbName string, schema string, policyName string) ([]describePolicyEntity, error) {
	ret := _m.Called(policyType, dbName, schema, policyName)

	var r0 []describePolicyEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) ([]describePolicyEntity, error)); ok {
		return rf(policyType, dbName, schema, policyName)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) []describePolicyEntity); ok {
		r0 = rf(policyType, dbName, schema, policyName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]describePolicyEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(policyType, dbName, schema, policyName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_DescribePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribePolicy'
type mockDataAccessRepository_DescribePolicy_Call struct {
	*mock.Call
}

// DescribePolicy is a helper method to define mock.On call
//   - policyType string
//   - dbName string
//   - schema string
//   - policyName string
func (_e *mockDataAccessRepository_Expecter) DescribePolicy(policyType interface{}, dbName interface{}, schema interface{}, policyName interface{}) *mockDataAccessRepository_DescribePolicy_Call {
	return &mockDataAccessRepository_DescribePolicy_Call{Call: _e.mock.On("DescribePolicy", policyType, dbName, schema, policyName)}
}

func (_c *mockDataAccessRepository_DescribePolicy_Call) Run(run func(policyType string, dbName string, schema string, policyName string)) *mockDataAccessRepository_DescribePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_DescribePolicy_Call) Return(_a0 []describePolicyEntity, _a1 error) *mockDataAccessRepository_DescribePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_DescribePolicy_Call) RunAndReturn(run func(string, string, string, string) ([]describePolicyEntity, error)) *mockDataAccessRepository_DescribePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DropMaskingPolicy provides a mock function with given fields: databaseName, schema, maskName
func (_m *mockDataAccessRepository) DropMaskingPolicy(databaseName string, schema string, maskName string) error {
	ret := _m.Called(databaseName, schema, maskName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(databaseName, schema, maskName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_DropMaskingPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropMaskingPolicy'
type mockDataAccessRepository_DropMaskingPolicy_Call struct {
	*mock.Call
}

// DropMaskingPolicy is a helper method to define mock.On call
//   - databaseName string
//   - schema string
//   - maskName string
func (_e *mockDataAccessRepository_Expecter) DropMaskingPolicy(databaseName interface{}, schema interface{}, maskName interface{}) *mockDataAccessRepository_DropMaskingPolicy_Call {
	return &mockDataAccessRepository_DropMaskingPolicy_Call{Call: _e.mock.On("DropMaskingPolicy", databaseName, schema, maskName)}
}

func (_c *mockDataAccessRepository_DropMaskingPolicy_Call) Run(run func(databaseName string, schema string, maskName string)) *mockDataAccessRepository_DropMaskingPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_DropMaskingPolicy_Call) Return(err error) *mockDataAccessRepository_DropMaskingPolicy_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockDataAccessRepository_DropMaskingPolicy_Call) RunAndReturn(run func(string, string, string) error) *mockDataAccessRepository_DropMaskingPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DropRole provides a mock function with given fields: roleName
func (_m *mockDataAccessRepository) DropRole(roleName string) error {
	ret := _m.Called(roleName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_DropRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropRole'
type mockDataAccessRepository_DropRole_Call struct {
	*mock.Call
}

// DropRole is a helper method to define mock.On call
//   - roleName string
func (_e *mockDataAccessRepository_Expecter) DropRole(roleName interface{}) *mockDataAccessRepository_DropRole_Call {
	return &mockDataAccessRepository_DropRole_Call{Call: _e.mock.On("DropRole", roleName)}
}

func (_c *mockDataAccessRepository_DropRole_Call) Run(run func(roleName string)) *mockDataAccessRepository_DropRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_DropRole_Call) Return(_a0 error) *mockDataAccessRepository_DropRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_DropRole_Call) RunAndReturn(run func(string) error) *mockDataAccessRepository_DropRole_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteGrant provides a mock function with given fields: perm, on, role
func (_m *mockDataAccessRepository) ExecuteGrant(perm string, on string, role string) error {
	ret := _m.Called(perm, on, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(perm, on, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_ExecuteGrant_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteGrant'
type mockDataAccessRepository_ExecuteGrant_Call struct {
	*mock.Call
}

// ExecuteGrant is a helper method to define mock.On call
//   - perm string
//   - on string
//   - role string
func (_e *mockDataAccessRepository_Expecter) ExecuteGrant(perm interface{}, on interface{}, role interface{}) *mockDataAccessRepository_ExecuteGrant_Call {
	return &mockDataAccessRepository_ExecuteGrant_Call{Call: _e.mock.On("ExecuteGrant", perm, on, role)}
}

func (_c *mockDataAccessRepository_ExecuteGrant_Call) Run(run func(perm string, on string, role string)) *mockDataAccessRepository_ExecuteGrant_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_ExecuteGrant_Call) Return(_a0 error) *mockDataAccessRepository_ExecuteGrant_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_ExecuteGrant_Call) RunAndReturn(run func(string, string, string) error) *mockDataAccessRepository_ExecuteGrant_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteRevoke provides a mock function with given fields: perm, on, role
func (_m *mockDataAccessRepository) ExecuteRevoke(perm string, on string, role string) error {
	ret := _m.Called(perm, on, role)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(perm, on, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_ExecuteRevoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteRevoke'
type mockDataAccessRepository_ExecuteRevoke_Call struct {
	*mock.Call
}

// ExecuteRevoke is a helper method to define mock.On call
//   - perm string
//   - on string
//   - role string
func (_e *mockDataAccessRepository_Expecter) ExecuteRevoke(perm interface{}, on interface{}, role interface{}) *mockDataAccessRepository_ExecuteRevoke_Call {
	return &mockDataAccessRepository_ExecuteRevoke_Call{Call: _e.mock.On("ExecuteRevoke", perm, on, role)}
}

func (_c *mockDataAccessRepository_ExecuteRevoke_Call) Run(run func(perm string, on string, role string)) *mockDataAccessRepository_ExecuteRevoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_ExecuteRevoke_Call) Return(_a0 error) *mockDataAccessRepository_ExecuteRevoke_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_ExecuteRevoke_Call) RunAndReturn(run func(string, string, string) error) *mockDataAccessRepository_ExecuteRevoke_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataBases provides a mock function with given fields:
func (_m *mockDataAccessRepository) GetDataBases() ([]DbEntity, error) {
	ret := _m.Called()

	var r0 []DbEntity
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]DbEntity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []DbEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DbEntity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetDataBases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataBases'
type mockDataAccessRepository_GetDataBases_Call struct {
	*mock.Call
}

// GetDataBases is a helper method to define mock.On call
func (_e *mockDataAccessRepository_Expecter) GetDataBases() *mockDataAccessRepository_GetDataBases_Call {
	return &mockDataAccessRepository_GetDataBases_Call{Call: _e.mock.On("GetDataBases")}
}

func (_c *mockDataAccessRepository_GetDataBases_Call) Run(run func()) *mockDataAccessRepository_GetDataBases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataAccessRepository_GetDataBases_Call) Return(_a0 []DbEntity, _a1 error) *mockDataAccessRepository_GetDataBases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetDataBases_Call) RunAndReturn(run func() ([]DbEntity, error)) *mockDataAccessRepository_GetDataBases_Call {
	_c.Call.Return(run)
	return _c
}

// GetGrantsOfRole provides a mock function with given fields: roleName
func (_m *mockDataAccessRepository) GetGrantsOfRole(roleName string) ([]GrantOfRole, error) {
	ret := _m.Called(roleName)

	var r0 []GrantOfRole
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]GrantOfRole, error)); ok {
		return rf(roleName)
	}
	if rf, ok := ret.Get(0).(func(string) []GrantOfRole); ok {
		r0 = rf(roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GrantOfRole)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetGrantsOfRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGrantsOfRole'
type mockDataAccessRepository_GetGrantsOfRole_Call struct {
	*mock.Call
}

// GetGrantsOfRole is a helper method to define mock.On call
//   - roleName string
func (_e *mockDataAccessRepository_Expecter) GetGrantsOfRole(roleName interface{}) *mockDataAccessRepository_GetGrantsOfRole_Call {
	return &mockDataAccessRepository_GetGrantsOfRole_Call{Call: _e.mock.On("GetGrantsOfRole", roleName)}
}

func (_c *mockDataAccessRepository_GetGrantsOfRole_Call) Run(run func(roleName string)) *mockDataAccessRepository_GetGrantsOfRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetGrantsOfRole_Call) Return(_a0 []GrantOfRole, _a1 error) *mockDataAccessRepository_GetGrantsOfRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetGrantsOfRole_Call) RunAndReturn(run func(string) ([]GrantOfRole, error)) *mockDataAccessRepository_GetGrantsOfRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetGrantsToRole provides a mock function with given fields: roleName
func (_m *mockDataAccessRepository) GetGrantsToRole(roleName string) ([]GrantToRole, error) {
	ret := _m.Called(roleName)

	var r0 []GrantToRole
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]GrantToRole, error)); ok {
		return rf(roleName)
	}
	if rf, ok := ret.Get(0).(func(string) []GrantToRole); ok {
		r0 = rf(roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GrantToRole)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetGrantsToRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGrantsToRole'
type mockDataAccessRepository_GetGrantsToRole_Call struct {
	*mock.Call
}

// GetGrantsToRole is a helper method to define mock.On call
//   - roleName string
func (_e *mockDataAccessRepository_Expecter) GetGrantsToRole(roleName interface{}) *mockDataAccessRepository_GetGrantsToRole_Call {
	return &mockDataAccessRepository_GetGrantsToRole_Call{Call: _e.mock.On("GetGrantsToRole", roleName)}
}

func (_c *mockDataAccessRepository_GetGrantsToRole_Call) Run(run func(roleName string)) *mockDataAccessRepository_GetGrantsToRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetGrantsToRole_Call) Return(_a0 []GrantToRole, _a1 error) *mockDataAccessRepository_GetGrantsToRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetGrantsToRole_Call) RunAndReturn(run func(string) ([]GrantToRole, error)) *mockDataAccessRepository_GetGrantsToRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicies provides a mock function with given fields: policy
func (_m *mockDataAccessRepository) GetPolicies(policy string) ([]PolicyEntity, error) {
	ret := _m.Called(policy)

	var r0 []PolicyEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]PolicyEntity, error)); ok {
		return rf(policy)
	}
	if rf, ok := ret.Get(0).(func(string) []PolicyEntity); ok {
		r0 = rf(policy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]PolicyEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(policy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicies'
type mockDataAccessRepository_GetPolicies_Call struct {
	*mock.Call
}

// GetPolicies is a helper method to define mock.On call
//   - policy string
func (_e *mockDataAccessRepository_Expecter) GetPolicies(policy interface{}) *mockDataAccessRepository_GetPolicies_Call {
	return &mockDataAccessRepository_GetPolicies_Call{Call: _e.mock.On("GetPolicies", policy)}
}

func (_c *mockDataAccessRepository_GetPolicies_Call) Run(run func(policy string)) *mockDataAccessRepository_GetPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetPolicies_Call) Return(_a0 []PolicyEntity, _a1 error) *mockDataAccessRepository_GetPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetPolicies_Call) RunAndReturn(run func(string) ([]PolicyEntity, error)) *mockDataAccessRepository_GetPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetPoliciesLike provides a mock function with given fields: policy, like
func (_m *mockDataAccessRepository) GetPoliciesLike(policy string, like string) ([]PolicyEntity, error) {
	ret := _m.Called(policy, like)

	var r0 []PolicyEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]PolicyEntity, error)); ok {
		return rf(policy, like)
	}
	if rf, ok := ret.Get(0).(func(string, string) []PolicyEntity); ok {
		r0 = rf(policy, like)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]PolicyEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(policy, like)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetPoliciesLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPoliciesLike'
type mockDataAccessRepository_GetPoliciesLike_Call struct {
	*mock.Call
}

// GetPoliciesLike is a helper method to define mock.On call
//   - policy string
//   - like string
func (_e *mockDataAccessRepository_Expecter) GetPoliciesLike(policy interface{}, like interface{}) *mockDataAccessRepository_GetPoliciesLike_Call {
	return &mockDataAccessRepository_GetPoliciesLike_Call{Call: _e.mock.On("GetPoliciesLike", policy, like)}
}

func (_c *mockDataAccessRepository_GetPoliciesLike_Call) Run(run func(policy string, like string)) *mockDataAccessRepository_GetPoliciesLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetPoliciesLike_Call) Return(_a0 []PolicyEntity, _a1 error) *mockDataAccessRepository_GetPoliciesLike_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetPoliciesLike_Call) RunAndReturn(run func(string, string) ([]PolicyEntity, error)) *mockDataAccessRepository_GetPoliciesLike_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyReferences provides a mock function with given fields: dbName, schema, policyName
func (_m *mockDataAccessRepository) GetPolicyReferences(dbName string, schema string, policyName string) ([]policyReferenceEntity, error) {
	ret := _m.Called(dbName, schema, policyName)

	var r0 []policyReferenceEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]policyReferenceEntity, error)); ok {
		return rf(dbName, schema, policyName)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []policyReferenceEntity); ok {
		r0 = rf(dbName, schema, policyName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]policyReferenceEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(dbName, schema, policyName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetPolicyReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyReferences'
type mockDataAccessRepository_GetPolicyReferences_Call struct {
	*mock.Call
}

// GetPolicyReferences is a helper method to define mock.On call
//   - dbName string
//   - schema string
//   - policyName string
func (_e *mockDataAccessRepository_Expecter) GetPolicyReferences(dbName interface{}, schema interface{}, policyName interface{}) *mockDataAccessRepository_GetPolicyReferences_Call {
	return &mockDataAccessRepository_GetPolicyReferences_Call{Call: _e.mock.On("GetPolicyReferences", dbName, schema, policyName)}
}

func (_c *mockDataAccessRepository_GetPolicyReferences_Call) Run(run func(dbName string, schema string, policyName string)) *mockDataAccessRepository_GetPolicyReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetPolicyReferences_Call) Return(_a0 []policyReferenceEntity, _a1 error) *mockDataAccessRepository_GetPolicyReferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetPolicyReferences_Call) RunAndReturn(run func(string, string, string) ([]policyReferenceEntity, error)) *mockDataAccessRepository_GetPolicyReferences_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoles provides a mock function with given fields:
func (_m *mockDataAccessRepository) GetRoles() ([]RoleEntity, error) {
	ret := _m.Called()

	var r0 []RoleEntity
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]RoleEntity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []RoleEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RoleEntity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoles'
type mockDataAccessRepository_GetRoles_Call struct {
	*mock.Call
}

// GetRoles is a helper method to define mock.On call
func (_e *mockDataAccessRepository_Expecter) GetRoles() *mockDataAccessRepository_GetRoles_Call {
	return &mockDataAccessRepository_GetRoles_Call{Call: _e.mock.On("GetRoles")}
}

func (_c *mockDataAccessRepository_GetRoles_Call) Run(run func()) *mockDataAccessRepository_GetRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataAccessRepository_GetRoles_Call) Return(_a0 []RoleEntity, _a1 error) *mockDataAccessRepository_GetRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetRoles_Call) RunAndReturn(run func() ([]RoleEntity, error)) *mockDataAccessRepository_GetRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetRolesWithPrefix provides a mock function with given fields: prefix
func (_m *mockDataAccessRepository) GetRolesWithPrefix(prefix string) ([]RoleEntity, error) {
	ret := _m.Called(prefix)

	var r0 []RoleEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]RoleEntity, error)); ok {
		return rf(prefix)
	}
	if rf, ok := ret.Get(0).(func(string) []RoleEntity); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RoleEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetRolesWithPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRolesWithPrefix'
type mockDataAccessRepository_GetRolesWithPrefix_Call struct {
	*mock.Call
}

// GetRolesWithPrefix is a helper method to define mock.On call
//   - prefix string
func (_e *mockDataAccessRepository_Expecter) GetRolesWithPrefix(prefix interface{}) *mockDataAccessRepository_GetRolesWithPrefix_Call {
	return &mockDataAccessRepository_GetRolesWithPrefix_Call{Call: _e.mock.On("GetRolesWithPrefix", prefix)}
}

func (_c *mockDataAccessRepository_GetRolesWithPrefix_Call) Run(run func(prefix string)) *mockDataAccessRepository_GetRolesWithPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetRolesWithPrefix_Call) Return(_a0 []RoleEntity, _a1 error) *mockDataAccessRepository_GetRolesWithPrefix_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetRolesWithPrefix_Call) RunAndReturn(run func(string) ([]RoleEntity, error)) *mockDataAccessRepository_GetRolesWithPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// GetSchemasInDatabase provides a mock function with given fields: databaseName, handleEntity
func (_m *mockDataAccessRepository) GetSchemasInDatabase(databaseName string, handleEntity EntityHandler) error {
	ret := _m.Called(databaseName, handleEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, EntityHandler) error); ok {
		r0 = rf(databaseName, handleEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_GetSchemasInDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchemasInDatabase'
type mockDataAccessRepository_GetSchemasInDatabase_Call struct {
	*mock.Call
}

// GetSchemasInDatabase is a helper method to define mock.On call
//   - databaseName string
//   - handleEntity EntityHandler
func (_e *mockDataAccessRepository_Expecter) GetSchemasInDatabase(databaseName interface{}, handleEntity interface{}) *mockDataAccessRepository_GetSchemasInDatabase_Call {
	return &mockDataAccessRepository_GetSchemasInDatabase_Call{Call: _e.mock.On("GetSchemasInDatabase", databaseName, handleEntity)}
}

func (_c *mockDataAccessRepository_GetSchemasInDatabase_Call) Run(run func(databaseName string, handleEntity EntityHandler)) *mockDataAccessRepository_GetSchemasInDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(EntityHandler))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetSchemasInDatabase_Call) Return(_a0 error) *mockDataAccessRepository_GetSchemasInDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_GetSchemasInDatabase_Call) RunAndReturn(run func(string, EntityHandler) error) *mockDataAccessRepository_GetSchemasInDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// GetShares provides a mock function with given fields:
func (_m *mockDataAccessRepository) GetShares() ([]DbEntity, error) {
	ret := _m.Called()

	var r0 []DbEntity
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]DbEntity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []DbEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DbEntity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetShares_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShares'
type mockDataAccessRepository_GetShares_Call struct {
	*mock.Call
}

// GetShares is a helper method to define mock.On call
func (_e *mockDataAccessRepository_Expecter) GetShares() *mockDataAccessRepository_GetShares_Call {
	return &mockDataAccessRepository_GetShares_Call{Call: _e.mock.On("GetShares")}
}

func (_c *mockDataAccessRepository_GetShares_Call) Run(run func()) *mockDataAccessRepository_GetShares_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataAccessRepository_GetShares_Call) Return(_a0 []DbEntity, _a1 error) *mockDataAccessRepository_GetShares_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetShares_Call) RunAndReturn(run func() ([]DbEntity, error)) *mockDataAccessRepository_GetShares_Call {
	_c.Call.Return(run)
	return _c
}

// GetTablesInDatabase provides a mock function with given fields: databaseName, schemaName, handleEntity
func (_m *mockDataAccessRepository) GetTablesInDatabase(databaseName string, schemaName string, handleEntity EntityHandler) error {
	ret := _m.Called(databaseName, schemaName, handleEntity)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, EntityHandler) error); ok {
		r0 = rf(databaseName, schemaName, handleEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_GetTablesInDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTablesInDatabase'
type mockDataAccessRepository_GetTablesInDatabase_Call struct {
	*mock.Call
}

// GetTablesInDatabase is a helper method to define mock.On call
//   - databaseName string
//   - schemaName string
//   - handleEntity EntityHandler
func (_e *mockDataAccessRepository_Expecter) GetTablesInDatabase(databaseName interface{}, schemaName interface{}, handleEntity interface{}) *mockDataAccessRepository_GetTablesInDatabase_Call {
	return &mockDataAccessRepository_GetTablesInDatabase_Call{Call: _e.mock.On("GetTablesInDatabase", databaseName, schemaName, handleEntity)}
}

func (_c *mockDataAccessRepository_GetTablesInDatabase_Call) Run(run func(databaseName string, schemaName string, handleEntity EntityHandler)) *mockDataAccessRepository_GetTablesInDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(EntityHandler))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetTablesInDatabase_Call) Return(_a0 error) *mockDataAccessRepository_GetTablesInDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_GetTablesInDatabase_Call) RunAndReturn(run func(string, string, EntityHandler) error) *mockDataAccessRepository_GetTablesInDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// GetWarehouses provides a mock function with given fields:
func (_m *mockDataAccessRepository) GetWarehouses() ([]DbEntity, error) {
	ret := _m.Called()

	var r0 []DbEntity
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]DbEntity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []DbEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DbEntity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetWarehouses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWarehouses'
type mockDataAccessRepository_GetWarehouses_Call struct {
	*mock.Call
}

// GetWarehouses is a helper method to define mock.On call
func (_e *mockDataAccessRepository_Expecter) GetWarehouses() *mockDataAccessRepository_GetWarehouses_Call {
	return &mockDataAccessRepository_GetWarehouses_Call{Call: _e.mock.On("GetWarehouses")}
}

func (_c *mockDataAccessRepository_GetWarehouses_Call) Run(run func()) *mockDataAccessRepository_GetWarehouses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataAccessRepository_GetWarehouses_Call) Return(_a0 []DbEntity, _a1 error) *mockDataAccessRepository_GetWarehouses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetWarehouses_Call) RunAndReturn(run func() ([]DbEntity, error)) *mockDataAccessRepository_GetWarehouses_Call {
	_c.Call.Return(run)
	return _c
}

// GrantRolesToRole provides a mock function with given fields: ctx, role, roles
func (_m *mockDataAccessRepository) GrantRolesToRole(ctx context.Context, role string, roles ...string) error {
	_va := make([]interface{}, len(roles))
	for _i := range roles {
		_va[_i] = roles[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, role)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) error); ok {
		r0 = rf(ctx, role, roles...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_GrantRolesToRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantRolesToRole'
type mockDataAccessRepository_GrantRolesToRole_Call struct {
	*mock.Call
}

// GrantRolesToRole is a helper method to define mock.On call
//   - ctx context.Context
//   - role string
//   - roles ...string
func (_e *mockDataAccessRepository_Expecter) GrantRolesToRole(ctx interface{}, role interface{}, roles ...interface{}) *mockDataAccessRepository_GrantRolesToRole_Call {
	return &mockDataAccessRepository_GrantRolesToRole_Call{Call: _e.mock.On("GrantRolesToRole",
		append([]interface{}{ctx, role}, roles...)...)}
}

func (_c *mockDataAccessRepository_GrantRolesToRole_Call) Run(run func(ctx context.Context, role string, roles ...string)) *mockDataAccessRepository_GrantRolesToRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessRepository_GrantRolesToRole_Call) Return(_a0 error) *mockDataAccessRepository_GrantRolesToRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_GrantRolesToRole_Call) RunAndReturn(run func(context.Context, string, ...string) error) *mockDataAccessRepository_GrantRolesToRole_Call {
	_c.Call.Return(run)
	return _c
}

// GrantUsersToRole provides a mock function with given fields: ctx, role, users
func (_m *mockDataAccessRepository) GrantUsersToRole(ctx context.Context, role string, users ...string) error {
	_va := make([]interface{}, len(users))
	for _i := range users {
		_va[_i] = users[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, role)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) error); ok {
		r0 = rf(ctx, role, users...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_GrantUsersToRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantUsersToRole'
type mockDataAccessRepository_GrantUsersToRole_Call struct {
	*mock.Call
}

// GrantUsersToRole is a helper method to define mock.On call
//   - ctx context.Context
//   - role string
//   - users ...string
func (_e *mockDataAccessRepository_Expecter) GrantUsersToRole(ctx interface{}, role interface{}, users ...interface{}) *mockDataAccessRepository_GrantUsersToRole_Call {
	return &mockDataAccessRepository_GrantUsersToRole_Call{Call: _e.mock.On("GrantUsersToRole",
		append([]interface{}{ctx, role}, users...)...)}
}

func (_c *mockDataAccessRepository_GrantUsersToRole_Call) Run(run func(ctx context.Context, role string, users ...string)) *mockDataAccessRepository_GrantUsersToRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessRepository_GrantUsersToRole_Call) Return(_a0 error) *mockDataAccessRepository_GrantUsersToRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_GrantUsersToRole_Call) RunAndReturn(run func(context.Context, string, ...string) error) *mockDataAccessRepository_GrantUsersToRole_Call {
	_c.Call.Return(run)
	return _c
}

// RenameRole provides a mock function with given fields: oldName, newName
func (_m *mockDataAccessRepository) RenameRole(oldName string, newName string) error {
	ret := _m.Called(oldName, newName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(oldName, newName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_RenameRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameRole'
type mockDataAccessRepository_RenameRole_Call struct {
	*mock.Call
}

// RenameRole is a helper method to define mock.On call
//   - oldName string
//   - newName string
func (_e *mockDataAccessRepository_Expecter) RenameRole(oldName interface{}, newName interface{}) *mockDataAccessRepository_RenameRole_Call {
	return &mockDataAccessRepository_RenameRole_Call{Call: _e.mock.On("RenameRole", oldName, newName)}
}

func (_c *mockDataAccessRepository_RenameRole_Call) Run(run func(oldName string, newName string)) *mockDataAccessRepository_RenameRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_RenameRole_Call) Return(_a0 error) *mockDataAccessRepository_RenameRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_RenameRole_Call) RunAndReturn(run func(string, string) error) *mockDataAccessRepository_RenameRole_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeRolesFromRole provides a mock function with given fields: ctx, role, roles
func (_m *mockDataAccessRepository) RevokeRolesFromRole(ctx context.Context, role string, roles ...string) error {
	_va := make([]interface{}, len(roles))
	for _i := range roles {
		_va[_i] = roles[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, role)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) error); ok {
		r0 = rf(ctx, role, roles...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_RevokeRolesFromRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeRolesFromRole'
type mockDataAccessRepository_RevokeRolesFromRole_Call struct {
	*mock.Call
}

// RevokeRolesFromRole is a helper method to define mock.On call
//   - ctx context.Context
//   - role string
//   - roles ...string
func (_e *mockDataAccessRepository_Expecter) RevokeRolesFromRole(ctx interface{}, role interface{}, roles ...interface{}) *mockDataAccessRepository_RevokeRolesFromRole_Call {
	return &mockDataAccessRepository_RevokeRolesFromRole_Call{Call: _e.mock.On("RevokeRolesFromRole",
		append([]interface{}{ctx, role}, roles...)...)}
}

func (_c *mockDataAccessRepository_RevokeRolesFromRole_Call) Run(run func(ctx context.Context, role string, roles ...string)) *mockDataAccessRepository_RevokeRolesFromRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessRepository_RevokeRolesFromRole_Call) Return(_a0 error) *mockDataAccessRepository_RevokeRolesFromRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_RevokeRolesFromRole_Call) RunAndReturn(run func(context.Context, string, ...string) error) *mockDataAccessRepository_RevokeRolesFromRole_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeUsersFromRole provides a mock function with given fields: ctx, role, users
func (_m *mockDataAccessRepository) RevokeUsersFromRole(ctx context.Context, role string, users ...string) error {
	_va := make([]interface{}, len(users))
	for _i := range users {
		_va[_i] = users[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, role)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) error); ok {
		r0 = rf(ctx, role, users...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_RevokeUsersFromRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeUsersFromRole'
type mockDataAccessRepository_RevokeUsersFromRole_Call struct {
	*mock.Call
}

// RevokeUsersFromRole is a helper method to define mock.On call
//   - ctx context.Context
//   - role string
//   - users ...string
func (_e *mockDataAccessRepository_Expecter) RevokeUsersFromRole(ctx interface{}, role interface{}, users ...interface{}) *mockDataAccessRepository_RevokeUsersFromRole_Call {
	return &mockDataAccessRepository_RevokeUsersFromRole_Call{Call: _e.mock.On("RevokeUsersFromRole",
		append([]interface{}{ctx, role}, users...)...)}
}

func (_c *mockDataAccessRepository_RevokeUsersFromRole_Call) Run(run func(ctx context.Context, role string, users ...string)) *mockDataAccessRepository_RevokeUsersFromRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessRepository_RevokeUsersFromRole_Call) Return(_a0 error) *mockDataAccessRepository_RevokeUsersFromRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_RevokeUsersFromRole_Call) RunAndReturn(run func(context.Context, string, ...string) error) *mockDataAccessRepository_RevokeUsersFromRole_Call {
	_c.Call.Return(run)
	return _c
}

// TotalQueryTime provides a mock function with given fields:
func (_m *mockDataAccessRepository) TotalQueryTime() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// mockDataAccessRepository_TotalQueryTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalQueryTime'
type mockDataAccessRepository_TotalQueryTime_Call struct {
	*mock.Call
}

// TotalQueryTime is a helper method to define mock.On call
func (_e *mockDataAccessRepository_Expecter) TotalQueryTime() *mockDataAccessRepository_TotalQueryTime_Call {
	return &mockDataAccessRepository_TotalQueryTime_Call{Call: _e.mock.On("TotalQueryTime")}
}

func (_c *mockDataAccessRepository_TotalQueryTime_Call) Run(run func()) *mockDataAccessRepository_TotalQueryTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataAccessRepository_TotalQueryTime_Call) Return(_a0 time.Duration) *mockDataAccessRepository_TotalQueryTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_TotalQueryTime_Call) RunAndReturn(run func() time.Duration) *mockDataAccessRepository_TotalQueryTime_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDataAccessRepository creates a new instance of mockDataAccessRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDataAccessRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDataAccessRepository {
	mock := &mockDataAccessRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
