// Code generated by mockery v2.50.1. DO NOT EDIT.

package snowflake

import (
	context "context"

	tag "github.com/raito-io/cli/base/tag"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// mockDataAccessRepository is an autogenerated mock type for the dataAccessRepository type
type mockDataAccessRepository struct {
	mock.Mock
}

type mockDataAccessRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDataAccessRepository) EXPECT() *mockDataAccessRepository_Expecter {
	return &mockDataAccessRepository_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *mockDataAccessRepository) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type mockDataAccessRepository_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *mockDataAccessRepository_Expecter) Close() *mockDataAccessRepository_Close_Call {
	return &mockDataAccessRepository_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *mockDataAccessRepository_Close_Call) Run(run func()) *mockDataAccessRepository_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataAccessRepository_Close_Call) Return(_a0 error) *mockDataAccessRepository_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_Close_Call) RunAndReturn(run func() error) *mockDataAccessRepository_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CommentAccountRoleIfExists provides a mock function with given fields: comment, objectName
func (_m *mockDataAccessRepository) CommentAccountRoleIfExists(comment string, objectName string) error {
	ret := _m.Called(comment, objectName)

	if len(ret) == 0 {
		panic("no return value specified for CommentAccountRoleIfExists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(comment, objectName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_CommentAccountRoleIfExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommentAccountRoleIfExists'
type mockDataAccessRepository_CommentAccountRoleIfExists_Call struct {
	*mock.Call
}

// CommentAccountRoleIfExists is a helper method to define mock.On call
//   - comment string
//   - objectName string
func (_e *mockDataAccessRepository_Expecter) CommentAccountRoleIfExists(comment interface{}, objectName interface{}) *mockDataAccessRepository_CommentAccountRoleIfExists_Call {
	return &mockDataAccessRepository_CommentAccountRoleIfExists_Call{Call: _e.mock.On("CommentAccountRoleIfExists", comment, objectName)}
}

func (_c *mockDataAccessRepository_CommentAccountRoleIfExists_Call) Run(run func(comment string, objectName string)) *mockDataAccessRepository_CommentAccountRoleIfExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_CommentAccountRoleIfExists_Call) Return(_a0 error) *mockDataAccessRepository_CommentAccountRoleIfExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_CommentAccountRoleIfExists_Call) RunAndReturn(run func(string, string) error) *mockDataAccessRepository_CommentAccountRoleIfExists_Call {
	_c.Call.Return(run)
	return _c
}

// CommentDatabaseRoleIfExists provides a mock function with given fields: comment, database, roleName
func (_m *mockDataAccessRepository) CommentDatabaseRoleIfExists(comment string, database string, roleName string) error {
	ret := _m.Called(comment, database, roleName)

	if len(ret) == 0 {
		panic("no return value specified for CommentDatabaseRoleIfExists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(comment, database, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_CommentDatabaseRoleIfExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CommentDatabaseRoleIfExists'
type mockDataAccessRepository_CommentDatabaseRoleIfExists_Call struct {
	*mock.Call
}

// CommentDatabaseRoleIfExists is a helper method to define mock.On call
//   - comment string
//   - database string
//   - roleName string
func (_e *mockDataAccessRepository_Expecter) CommentDatabaseRoleIfExists(comment interface{}, database interface{}, roleName interface{}) *mockDataAccessRepository_CommentDatabaseRoleIfExists_Call {
	return &mockDataAccessRepository_CommentDatabaseRoleIfExists_Call{Call: _e.mock.On("CommentDatabaseRoleIfExists", comment, database, roleName)}
}

func (_c *mockDataAccessRepository_CommentDatabaseRoleIfExists_Call) Run(run func(comment string, database string, roleName string)) *mockDataAccessRepository_CommentDatabaseRoleIfExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_CommentDatabaseRoleIfExists_Call) Return(_a0 error) *mockDataAccessRepository_CommentDatabaseRoleIfExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_CommentDatabaseRoleIfExists_Call) RunAndReturn(run func(string, string, string) error) *mockDataAccessRepository_CommentDatabaseRoleIfExists_Call {
	_c.Call.Return(run)
	return _c
}

// CreateAccountRole provides a mock function with given fields: roleName
func (_m *mockDataAccessRepository) CreateAccountRole(roleName string) error {
	ret := _m.Called(roleName)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccountRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_CreateAccountRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccountRole'
type mockDataAccessRepository_CreateAccountRole_Call struct {
	*mock.Call
}

// CreateAccountRole is a helper method to define mock.On call
//   - roleName string
func (_e *mockDataAccessRepository_Expecter) CreateAccountRole(roleName interface{}) *mockDataAccessRepository_CreateAccountRole_Call {
	return &mockDataAccessRepository_CreateAccountRole_Call{Call: _e.mock.On("CreateAccountRole", roleName)}
}

func (_c *mockDataAccessRepository_CreateAccountRole_Call) Run(run func(roleName string)) *mockDataAccessRepository_CreateAccountRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_CreateAccountRole_Call) Return(_a0 error) *mockDataAccessRepository_CreateAccountRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_CreateAccountRole_Call) RunAndReturn(run func(string) error) *mockDataAccessRepository_CreateAccountRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDatabaseRole provides a mock function with given fields: database, roleName
func (_m *mockDataAccessRepository) CreateDatabaseRole(database string, roleName string) error {
	ret := _m.Called(database, roleName)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabaseRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(database, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_CreateDatabaseRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDatabaseRole'
type mockDataAccessRepository_CreateDatabaseRole_Call struct {
	*mock.Call
}

// CreateDatabaseRole is a helper method to define mock.On call
//   - database string
//   - roleName string
func (_e *mockDataAccessRepository_Expecter) CreateDatabaseRole(database interface{}, roleName interface{}) *mockDataAccessRepository_CreateDatabaseRole_Call {
	return &mockDataAccessRepository_CreateDatabaseRole_Call{Call: _e.mock.On("CreateDatabaseRole", database, roleName)}
}

func (_c *mockDataAccessRepository_CreateDatabaseRole_Call) Run(run func(database string, roleName string)) *mockDataAccessRepository_CreateDatabaseRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_CreateDatabaseRole_Call) Return(_a0 error) *mockDataAccessRepository_CreateDatabaseRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_CreateDatabaseRole_Call) RunAndReturn(run func(string, string) error) *mockDataAccessRepository_CreateDatabaseRole_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMaskPolicy provides a mock function with given fields: databaseName, schema, maskName, columnsFullName, maskType, beneficiaries
func (_m *mockDataAccessRepository) CreateMaskPolicy(databaseName string, schema string, maskName string, columnsFullName []string, maskType *string, beneficiaries *MaskingBeneficiaries) error {
	ret := _m.Called(databaseName, schema, maskName, columnsFullName, maskType, beneficiaries)

	if len(ret) == 0 {
		panic("no return value specified for CreateMaskPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, []string, *string, *MaskingBeneficiaries) error); ok {
		r0 = rf(databaseName, schema, maskName, columnsFullName, maskType, beneficiaries)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_CreateMaskPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMaskPolicy'
type mockDataAccessRepository_CreateMaskPolicy_Call struct {
	*mock.Call
}

// CreateMaskPolicy is a helper method to define mock.On call
//   - databaseName string
//   - schema string
//   - maskName string
//   - columnsFullName []string
//   - maskType *string
//   - beneficiaries *MaskingBeneficiaries
func (_e *mockDataAccessRepository_Expecter) CreateMaskPolicy(databaseName interface{}, schema interface{}, maskName interface{}, columnsFullName interface{}, maskType interface{}, beneficiaries interface{}) *mockDataAccessRepository_CreateMaskPolicy_Call {
	return &mockDataAccessRepository_CreateMaskPolicy_Call{Call: _e.mock.On("CreateMaskPolicy", databaseName, schema, maskName, columnsFullName, maskType, beneficiaries)}
}

func (_c *mockDataAccessRepository_CreateMaskPolicy_Call) Run(run func(databaseName string, schema string, maskName string, columnsFullName []string, maskType *string, beneficiaries *MaskingBeneficiaries)) *mockDataAccessRepository_CreateMaskPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].([]string), args[4].(*string), args[5].(*MaskingBeneficiaries))
	})
	return _c
}

func (_c *mockDataAccessRepository_CreateMaskPolicy_Call) Return(_a0 error) *mockDataAccessRepository_CreateMaskPolicy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_CreateMaskPolicy_Call) RunAndReturn(run func(string, string, string, []string, *string, *MaskingBeneficiaries) error) *mockDataAccessRepository_CreateMaskPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DescribePolicy provides a mock function with given fields: policyType, dbName, schema, policyName
func (_m *mockDataAccessRepository) DescribePolicy(policyType string, dbName string, schema string, policyName string) ([]DescribePolicyEntity, error) {
	ret := _m.Called(policyType, dbName, schema, policyName)

	if len(ret) == 0 {
		panic("no return value specified for DescribePolicy")
	}

	var r0 []DescribePolicyEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) ([]DescribePolicyEntity, error)); ok {
		return rf(policyType, dbName, schema, policyName)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string) []DescribePolicyEntity); ok {
		r0 = rf(policyType, dbName, schema, policyName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DescribePolicyEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(policyType, dbName, schema, policyName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_DescribePolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DescribePolicy'
type mockDataAccessRepository_DescribePolicy_Call struct {
	*mock.Call
}

// DescribePolicy is a helper method to define mock.On call
//   - policyType string
//   - dbName string
//   - schema string
//   - policyName string
func (_e *mockDataAccessRepository_Expecter) DescribePolicy(policyType interface{}, dbName interface{}, schema interface{}, policyName interface{}) *mockDataAccessRepository_DescribePolicy_Call {
	return &mockDataAccessRepository_DescribePolicy_Call{Call: _e.mock.On("DescribePolicy", policyType, dbName, schema, policyName)}
}

func (_c *mockDataAccessRepository_DescribePolicy_Call) Run(run func(policyType string, dbName string, schema string, policyName string)) *mockDataAccessRepository_DescribePolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_DescribePolicy_Call) Return(_a0 []DescribePolicyEntity, _a1 error) *mockDataAccessRepository_DescribePolicy_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_DescribePolicy_Call) RunAndReturn(run func(string, string, string, string) ([]DescribePolicyEntity, error)) *mockDataAccessRepository_DescribePolicy_Call {
	_c.Call.Return(run)
	return _c
}

// DropAccountRole provides a mock function with given fields: roleName
func (_m *mockDataAccessRepository) DropAccountRole(roleName string) error {
	ret := _m.Called(roleName)

	if len(ret) == 0 {
		panic("no return value specified for DropAccountRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_DropAccountRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropAccountRole'
type mockDataAccessRepository_DropAccountRole_Call struct {
	*mock.Call
}

// DropAccountRole is a helper method to define mock.On call
//   - roleName string
func (_e *mockDataAccessRepository_Expecter) DropAccountRole(roleName interface{}) *mockDataAccessRepository_DropAccountRole_Call {
	return &mockDataAccessRepository_DropAccountRole_Call{Call: _e.mock.On("DropAccountRole", roleName)}
}

func (_c *mockDataAccessRepository_DropAccountRole_Call) Run(run func(roleName string)) *mockDataAccessRepository_DropAccountRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_DropAccountRole_Call) Return(_a0 error) *mockDataAccessRepository_DropAccountRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_DropAccountRole_Call) RunAndReturn(run func(string) error) *mockDataAccessRepository_DropAccountRole_Call {
	_c.Call.Return(run)
	return _c
}

// DropDatabaseRole provides a mock function with given fields: database, roleName
func (_m *mockDataAccessRepository) DropDatabaseRole(database string, roleName string) error {
	ret := _m.Called(database, roleName)

	if len(ret) == 0 {
		panic("no return value specified for DropDatabaseRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(database, roleName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_DropDatabaseRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropDatabaseRole'
type mockDataAccessRepository_DropDatabaseRole_Call struct {
	*mock.Call
}

// DropDatabaseRole is a helper method to define mock.On call
//   - database string
//   - roleName string
func (_e *mockDataAccessRepository_Expecter) DropDatabaseRole(database interface{}, roleName interface{}) *mockDataAccessRepository_DropDatabaseRole_Call {
	return &mockDataAccessRepository_DropDatabaseRole_Call{Call: _e.mock.On("DropDatabaseRole", database, roleName)}
}

func (_c *mockDataAccessRepository_DropDatabaseRole_Call) Run(run func(database string, roleName string)) *mockDataAccessRepository_DropDatabaseRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_DropDatabaseRole_Call) Return(_a0 error) *mockDataAccessRepository_DropDatabaseRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_DropDatabaseRole_Call) RunAndReturn(run func(string, string) error) *mockDataAccessRepository_DropDatabaseRole_Call {
	_c.Call.Return(run)
	return _c
}

// DropFilter provides a mock function with given fields: databaseName, schema, tableName, filterName
func (_m *mockDataAccessRepository) DropFilter(databaseName string, schema string, tableName string, filterName string) error {
	ret := _m.Called(databaseName, schema, tableName, filterName)

	if len(ret) == 0 {
		panic("no return value specified for DropFilter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(databaseName, schema, tableName, filterName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_DropFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropFilter'
type mockDataAccessRepository_DropFilter_Call struct {
	*mock.Call
}

// DropFilter is a helper method to define mock.On call
//   - databaseName string
//   - schema string
//   - tableName string
//   - filterName string
func (_e *mockDataAccessRepository_Expecter) DropFilter(databaseName interface{}, schema interface{}, tableName interface{}, filterName interface{}) *mockDataAccessRepository_DropFilter_Call {
	return &mockDataAccessRepository_DropFilter_Call{Call: _e.mock.On("DropFilter", databaseName, schema, tableName, filterName)}
}

func (_c *mockDataAccessRepository_DropFilter_Call) Run(run func(databaseName string, schema string, tableName string, filterName string)) *mockDataAccessRepository_DropFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_DropFilter_Call) Return(_a0 error) *mockDataAccessRepository_DropFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_DropFilter_Call) RunAndReturn(run func(string, string, string, string) error) *mockDataAccessRepository_DropFilter_Call {
	_c.Call.Return(run)
	return _c
}

// DropMaskingPolicy provides a mock function with given fields: databaseName, schema, maskName
func (_m *mockDataAccessRepository) DropMaskingPolicy(databaseName string, schema string, maskName string) error {
	ret := _m.Called(databaseName, schema, maskName)

	if len(ret) == 0 {
		panic("no return value specified for DropMaskingPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(databaseName, schema, maskName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_DropMaskingPolicy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DropMaskingPolicy'
type mockDataAccessRepository_DropMaskingPolicy_Call struct {
	*mock.Call
}

// DropMaskingPolicy is a helper method to define mock.On call
//   - databaseName string
//   - schema string
//   - maskName string
func (_e *mockDataAccessRepository_Expecter) DropMaskingPolicy(databaseName interface{}, schema interface{}, maskName interface{}) *mockDataAccessRepository_DropMaskingPolicy_Call {
	return &mockDataAccessRepository_DropMaskingPolicy_Call{Call: _e.mock.On("DropMaskingPolicy", databaseName, schema, maskName)}
}

func (_c *mockDataAccessRepository_DropMaskingPolicy_Call) Run(run func(databaseName string, schema string, maskName string)) *mockDataAccessRepository_DropMaskingPolicy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_DropMaskingPolicy_Call) Return(err error) *mockDataAccessRepository_DropMaskingPolicy_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *mockDataAccessRepository_DropMaskingPolicy_Call) RunAndReturn(run func(string, string, string) error) *mockDataAccessRepository_DropMaskingPolicy_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteGrantOnAccountRole provides a mock function with given fields: perm, on, role, isSystemGrant
func (_m *mockDataAccessRepository) ExecuteGrantOnAccountRole(perm string, on string, role string, isSystemGrant bool) error {
	ret := _m.Called(perm, on, role, isSystemGrant)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteGrantOnAccountRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, bool) error); ok {
		r0 = rf(perm, on, role, isSystemGrant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_ExecuteGrantOnAccountRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteGrantOnAccountRole'
type mockDataAccessRepository_ExecuteGrantOnAccountRole_Call struct {
	*mock.Call
}

// ExecuteGrantOnAccountRole is a helper method to define mock.On call
//   - perm string
//   - on string
//   - role string
//   - isSystemGrant bool
func (_e *mockDataAccessRepository_Expecter) ExecuteGrantOnAccountRole(perm interface{}, on interface{}, role interface{}, isSystemGrant interface{}) *mockDataAccessRepository_ExecuteGrantOnAccountRole_Call {
	return &mockDataAccessRepository_ExecuteGrantOnAccountRole_Call{Call: _e.mock.On("ExecuteGrantOnAccountRole", perm, on, role, isSystemGrant)}
}

func (_c *mockDataAccessRepository_ExecuteGrantOnAccountRole_Call) Run(run func(perm string, on string, role string, isSystemGrant bool)) *mockDataAccessRepository_ExecuteGrantOnAccountRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *mockDataAccessRepository_ExecuteGrantOnAccountRole_Call) Return(_a0 error) *mockDataAccessRepository_ExecuteGrantOnAccountRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_ExecuteGrantOnAccountRole_Call) RunAndReturn(run func(string, string, string, bool) error) *mockDataAccessRepository_ExecuteGrantOnAccountRole_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteGrantOnDatabaseRole provides a mock function with given fields: perm, on, database, databaseRole
func (_m *mockDataAccessRepository) ExecuteGrantOnDatabaseRole(perm string, on string, database string, databaseRole string) error {
	ret := _m.Called(perm, on, database, databaseRole)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteGrantOnDatabaseRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(perm, on, database, databaseRole)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_ExecuteGrantOnDatabaseRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteGrantOnDatabaseRole'
type mockDataAccessRepository_ExecuteGrantOnDatabaseRole_Call struct {
	*mock.Call
}

// ExecuteGrantOnDatabaseRole is a helper method to define mock.On call
//   - perm string
//   - on string
//   - database string
//   - databaseRole string
func (_e *mockDataAccessRepository_Expecter) ExecuteGrantOnDatabaseRole(perm interface{}, on interface{}, database interface{}, databaseRole interface{}) *mockDataAccessRepository_ExecuteGrantOnDatabaseRole_Call {
	return &mockDataAccessRepository_ExecuteGrantOnDatabaseRole_Call{Call: _e.mock.On("ExecuteGrantOnDatabaseRole", perm, on, database, databaseRole)}
}

func (_c *mockDataAccessRepository_ExecuteGrantOnDatabaseRole_Call) Run(run func(perm string, on string, database string, databaseRole string)) *mockDataAccessRepository_ExecuteGrantOnDatabaseRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_ExecuteGrantOnDatabaseRole_Call) Return(_a0 error) *mockDataAccessRepository_ExecuteGrantOnDatabaseRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_ExecuteGrantOnDatabaseRole_Call) RunAndReturn(run func(string, string, string, string) error) *mockDataAccessRepository_ExecuteGrantOnDatabaseRole_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteRevokeOnAccountRole provides a mock function with given fields: perm, on, role, isSystemGrant
func (_m *mockDataAccessRepository) ExecuteRevokeOnAccountRole(perm string, on string, role string, isSystemGrant bool) error {
	ret := _m.Called(perm, on, role, isSystemGrant)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteRevokeOnAccountRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, bool) error); ok {
		r0 = rf(perm, on, role, isSystemGrant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_ExecuteRevokeOnAccountRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteRevokeOnAccountRole'
type mockDataAccessRepository_ExecuteRevokeOnAccountRole_Call struct {
	*mock.Call
}

// ExecuteRevokeOnAccountRole is a helper method to define mock.On call
//   - perm string
//   - on string
//   - role string
//   - isSystemGrant bool
func (_e *mockDataAccessRepository_Expecter) ExecuteRevokeOnAccountRole(perm interface{}, on interface{}, role interface{}, isSystemGrant interface{}) *mockDataAccessRepository_ExecuteRevokeOnAccountRole_Call {
	return &mockDataAccessRepository_ExecuteRevokeOnAccountRole_Call{Call: _e.mock.On("ExecuteRevokeOnAccountRole", perm, on, role, isSystemGrant)}
}

func (_c *mockDataAccessRepository_ExecuteRevokeOnAccountRole_Call) Run(run func(perm string, on string, role string, isSystemGrant bool)) *mockDataAccessRepository_ExecuteRevokeOnAccountRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *mockDataAccessRepository_ExecuteRevokeOnAccountRole_Call) Return(_a0 error) *mockDataAccessRepository_ExecuteRevokeOnAccountRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_ExecuteRevokeOnAccountRole_Call) RunAndReturn(run func(string, string, string, bool) error) *mockDataAccessRepository_ExecuteRevokeOnAccountRole_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteRevokeOnDatabaseRole provides a mock function with given fields: perm, on, database, databaseRole
func (_m *mockDataAccessRepository) ExecuteRevokeOnDatabaseRole(perm string, on string, database string, databaseRole string) error {
	ret := _m.Called(perm, on, database, databaseRole)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteRevokeOnDatabaseRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(perm, on, database, databaseRole)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_ExecuteRevokeOnDatabaseRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteRevokeOnDatabaseRole'
type mockDataAccessRepository_ExecuteRevokeOnDatabaseRole_Call struct {
	*mock.Call
}

// ExecuteRevokeOnDatabaseRole is a helper method to define mock.On call
//   - perm string
//   - on string
//   - database string
//   - databaseRole string
func (_e *mockDataAccessRepository_Expecter) ExecuteRevokeOnDatabaseRole(perm interface{}, on interface{}, database interface{}, databaseRole interface{}) *mockDataAccessRepository_ExecuteRevokeOnDatabaseRole_Call {
	return &mockDataAccessRepository_ExecuteRevokeOnDatabaseRole_Call{Call: _e.mock.On("ExecuteRevokeOnDatabaseRole", perm, on, database, databaseRole)}
}

func (_c *mockDataAccessRepository_ExecuteRevokeOnDatabaseRole_Call) Run(run func(perm string, on string, database string, databaseRole string)) *mockDataAccessRepository_ExecuteRevokeOnDatabaseRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_ExecuteRevokeOnDatabaseRole_Call) Return(_a0 error) *mockDataAccessRepository_ExecuteRevokeOnDatabaseRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_ExecuteRevokeOnDatabaseRole_Call) RunAndReturn(run func(string, string, string, string) error) *mockDataAccessRepository_ExecuteRevokeOnDatabaseRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountRoles provides a mock function with no fields
func (_m *mockDataAccessRepository) GetAccountRoles() ([]RoleEntity, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAccountRoles")
	}

	var r0 []RoleEntity
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]RoleEntity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []RoleEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RoleEntity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetAccountRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountRoles'
type mockDataAccessRepository_GetAccountRoles_Call struct {
	*mock.Call
}

// GetAccountRoles is a helper method to define mock.On call
func (_e *mockDataAccessRepository_Expecter) GetAccountRoles() *mockDataAccessRepository_GetAccountRoles_Call {
	return &mockDataAccessRepository_GetAccountRoles_Call{Call: _e.mock.On("GetAccountRoles")}
}

func (_c *mockDataAccessRepository_GetAccountRoles_Call) Run(run func()) *mockDataAccessRepository_GetAccountRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataAccessRepository_GetAccountRoles_Call) Return(_a0 []RoleEntity, _a1 error) *mockDataAccessRepository_GetAccountRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetAccountRoles_Call) RunAndReturn(run func() ([]RoleEntity, error)) *mockDataAccessRepository_GetAccountRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccountRolesWithPrefix provides a mock function with given fields: prefix
func (_m *mockDataAccessRepository) GetAccountRolesWithPrefix(prefix string) ([]RoleEntity, error) {
	ret := _m.Called(prefix)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountRolesWithPrefix")
	}

	var r0 []RoleEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]RoleEntity, error)); ok {
		return rf(prefix)
	}
	if rf, ok := ret.Get(0).(func(string) []RoleEntity); ok {
		r0 = rf(prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RoleEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetAccountRolesWithPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountRolesWithPrefix'
type mockDataAccessRepository_GetAccountRolesWithPrefix_Call struct {
	*mock.Call
}

// GetAccountRolesWithPrefix is a helper method to define mock.On call
//   - prefix string
func (_e *mockDataAccessRepository_Expecter) GetAccountRolesWithPrefix(prefix interface{}) *mockDataAccessRepository_GetAccountRolesWithPrefix_Call {
	return &mockDataAccessRepository_GetAccountRolesWithPrefix_Call{Call: _e.mock.On("GetAccountRolesWithPrefix", prefix)}
}

func (_c *mockDataAccessRepository_GetAccountRolesWithPrefix_Call) Run(run func(prefix string)) *mockDataAccessRepository_GetAccountRolesWithPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetAccountRolesWithPrefix_Call) Return(_a0 []RoleEntity, _a1 error) *mockDataAccessRepository_GetAccountRolesWithPrefix_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetAccountRolesWithPrefix_Call) RunAndReturn(run func(string) ([]RoleEntity, error)) *mockDataAccessRepository_GetAccountRolesWithPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// GetColumnsInDatabase provides a mock function with given fields: databaseName, handleEntity
func (_m *mockDataAccessRepository) GetColumnsInDatabase(databaseName string, handleEntity EntityHandler) error {
	ret := _m.Called(databaseName, handleEntity)

	if len(ret) == 0 {
		panic("no return value specified for GetColumnsInDatabase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, EntityHandler) error); ok {
		r0 = rf(databaseName, handleEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_GetColumnsInDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetColumnsInDatabase'
type mockDataAccessRepository_GetColumnsInDatabase_Call struct {
	*mock.Call
}

// GetColumnsInDatabase is a helper method to define mock.On call
//   - databaseName string
//   - handleEntity EntityHandler
func (_e *mockDataAccessRepository_Expecter) GetColumnsInDatabase(databaseName interface{}, handleEntity interface{}) *mockDataAccessRepository_GetColumnsInDatabase_Call {
	return &mockDataAccessRepository_GetColumnsInDatabase_Call{Call: _e.mock.On("GetColumnsInDatabase", databaseName, handleEntity)}
}

func (_c *mockDataAccessRepository_GetColumnsInDatabase_Call) Run(run func(databaseName string, handleEntity EntityHandler)) *mockDataAccessRepository_GetColumnsInDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(EntityHandler))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetColumnsInDatabase_Call) Return(_a0 error) *mockDataAccessRepository_GetColumnsInDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_GetColumnsInDatabase_Call) RunAndReturn(run func(string, EntityHandler) error) *mockDataAccessRepository_GetColumnsInDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseRoleTags provides a mock function with given fields: databaseName, roleName
func (_m *mockDataAccessRepository) GetDatabaseRoleTags(databaseName string, roleName string) (map[string][]*tag.Tag, error) {
	ret := _m.Called(databaseName, roleName)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseRoleTags")
	}

	var r0 map[string][]*tag.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (map[string][]*tag.Tag, error)); ok {
		return rf(databaseName, roleName)
	}
	if rf, ok := ret.Get(0).(func(string, string) map[string][]*tag.Tag); ok {
		r0 = rf(databaseName, roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]*tag.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(databaseName, roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetDatabaseRoleTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseRoleTags'
type mockDataAccessRepository_GetDatabaseRoleTags_Call struct {
	*mock.Call
}

// GetDatabaseRoleTags is a helper method to define mock.On call
//   - databaseName string
//   - roleName string
func (_e *mockDataAccessRepository_Expecter) GetDatabaseRoleTags(databaseName interface{}, roleName interface{}) *mockDataAccessRepository_GetDatabaseRoleTags_Call {
	return &mockDataAccessRepository_GetDatabaseRoleTags_Call{Call: _e.mock.On("GetDatabaseRoleTags", databaseName, roleName)}
}

func (_c *mockDataAccessRepository_GetDatabaseRoleTags_Call) Run(run func(databaseName string, roleName string)) *mockDataAccessRepository_GetDatabaseRoleTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetDatabaseRoleTags_Call) Return(_a0 map[string][]*tag.Tag, _a1 error) *mockDataAccessRepository_GetDatabaseRoleTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetDatabaseRoleTags_Call) RunAndReturn(run func(string, string) (map[string][]*tag.Tag, error)) *mockDataAccessRepository_GetDatabaseRoleTags_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseRoles provides a mock function with given fields: database
func (_m *mockDataAccessRepository) GetDatabaseRoles(database string) ([]RoleEntity, error) {
	ret := _m.Called(database)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseRoles")
	}

	var r0 []RoleEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]RoleEntity, error)); ok {
		return rf(database)
	}
	if rf, ok := ret.Get(0).(func(string) []RoleEntity); ok {
		r0 = rf(database)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RoleEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(database)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetDatabaseRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseRoles'
type mockDataAccessRepository_GetDatabaseRoles_Call struct {
	*mock.Call
}

// GetDatabaseRoles is a helper method to define mock.On call
//   - database string
func (_e *mockDataAccessRepository_Expecter) GetDatabaseRoles(database interface{}) *mockDataAccessRepository_GetDatabaseRoles_Call {
	return &mockDataAccessRepository_GetDatabaseRoles_Call{Call: _e.mock.On("GetDatabaseRoles", database)}
}

func (_c *mockDataAccessRepository_GetDatabaseRoles_Call) Run(run func(database string)) *mockDataAccessRepository_GetDatabaseRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetDatabaseRoles_Call) Return(_a0 []RoleEntity, _a1 error) *mockDataAccessRepository_GetDatabaseRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetDatabaseRoles_Call) RunAndReturn(run func(string) ([]RoleEntity, error)) *mockDataAccessRepository_GetDatabaseRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabaseRolesWithPrefix provides a mock function with given fields: database, prefix
func (_m *mockDataAccessRepository) GetDatabaseRolesWithPrefix(database string, prefix string) ([]RoleEntity, error) {
	ret := _m.Called(database, prefix)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabaseRolesWithPrefix")
	}

	var r0 []RoleEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]RoleEntity, error)); ok {
		return rf(database, prefix)
	}
	if rf, ok := ret.Get(0).(func(string, string) []RoleEntity); ok {
		r0 = rf(database, prefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]RoleEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(database, prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetDatabaseRolesWithPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabaseRolesWithPrefix'
type mockDataAccessRepository_GetDatabaseRolesWithPrefix_Call struct {
	*mock.Call
}

// GetDatabaseRolesWithPrefix is a helper method to define mock.On call
//   - database string
//   - prefix string
func (_e *mockDataAccessRepository_Expecter) GetDatabaseRolesWithPrefix(database interface{}, prefix interface{}) *mockDataAccessRepository_GetDatabaseRolesWithPrefix_Call {
	return &mockDataAccessRepository_GetDatabaseRolesWithPrefix_Call{Call: _e.mock.On("GetDatabaseRolesWithPrefix", database, prefix)}
}

func (_c *mockDataAccessRepository_GetDatabaseRolesWithPrefix_Call) Run(run func(database string, prefix string)) *mockDataAccessRepository_GetDatabaseRolesWithPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetDatabaseRolesWithPrefix_Call) Return(_a0 []RoleEntity, _a1 error) *mockDataAccessRepository_GetDatabaseRolesWithPrefix_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetDatabaseRolesWithPrefix_Call) RunAndReturn(run func(string, string) ([]RoleEntity, error)) *mockDataAccessRepository_GetDatabaseRolesWithPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// GetDatabases provides a mock function with no fields
func (_m *mockDataAccessRepository) GetDatabases() ([]DbEntity, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDatabases")
	}

	var r0 []DbEntity
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]DbEntity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []DbEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DbEntity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetDatabases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDatabases'
type mockDataAccessRepository_GetDatabases_Call struct {
	*mock.Call
}

// GetDatabases is a helper method to define mock.On call
func (_e *mockDataAccessRepository_Expecter) GetDatabases() *mockDataAccessRepository_GetDatabases_Call {
	return &mockDataAccessRepository_GetDatabases_Call{Call: _e.mock.On("GetDatabases")}
}

func (_c *mockDataAccessRepository_GetDatabases_Call) Run(run func()) *mockDataAccessRepository_GetDatabases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataAccessRepository_GetDatabases_Call) Return(_a0 []DbEntity, _a1 error) *mockDataAccessRepository_GetDatabases_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetDatabases_Call) RunAndReturn(run func() ([]DbEntity, error)) *mockDataAccessRepository_GetDatabases_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunctionsInDatabase provides a mock function with given fields: databaseName, handleEntity
func (_m *mockDataAccessRepository) GetFunctionsInDatabase(databaseName string, handleEntity EntityHandler) error {
	ret := _m.Called(databaseName, handleEntity)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionsInDatabase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, EntityHandler) error); ok {
		r0 = rf(databaseName, handleEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_GetFunctionsInDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunctionsInDatabase'
type mockDataAccessRepository_GetFunctionsInDatabase_Call struct {
	*mock.Call
}

// GetFunctionsInDatabase is a helper method to define mock.On call
//   - databaseName string
//   - handleEntity EntityHandler
func (_e *mockDataAccessRepository_Expecter) GetFunctionsInDatabase(databaseName interface{}, handleEntity interface{}) *mockDataAccessRepository_GetFunctionsInDatabase_Call {
	return &mockDataAccessRepository_GetFunctionsInDatabase_Call{Call: _e.mock.On("GetFunctionsInDatabase", databaseName, handleEntity)}
}

func (_c *mockDataAccessRepository_GetFunctionsInDatabase_Call) Run(run func(databaseName string, handleEntity EntityHandler)) *mockDataAccessRepository_GetFunctionsInDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(EntityHandler))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetFunctionsInDatabase_Call) Return(_a0 error) *mockDataAccessRepository_GetFunctionsInDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_GetFunctionsInDatabase_Call) RunAndReturn(run func(string, EntityHandler) error) *mockDataAccessRepository_GetFunctionsInDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// GetGrantsOfAccountRole provides a mock function with given fields: roleName
func (_m *mockDataAccessRepository) GetGrantsOfAccountRole(roleName string) ([]GrantOfRole, error) {
	ret := _m.Called(roleName)

	if len(ret) == 0 {
		panic("no return value specified for GetGrantsOfAccountRole")
	}

	var r0 []GrantOfRole
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]GrantOfRole, error)); ok {
		return rf(roleName)
	}
	if rf, ok := ret.Get(0).(func(string) []GrantOfRole); ok {
		r0 = rf(roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GrantOfRole)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetGrantsOfAccountRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGrantsOfAccountRole'
type mockDataAccessRepository_GetGrantsOfAccountRole_Call struct {
	*mock.Call
}

// GetGrantsOfAccountRole is a helper method to define mock.On call
//   - roleName string
func (_e *mockDataAccessRepository_Expecter) GetGrantsOfAccountRole(roleName interface{}) *mockDataAccessRepository_GetGrantsOfAccountRole_Call {
	return &mockDataAccessRepository_GetGrantsOfAccountRole_Call{Call: _e.mock.On("GetGrantsOfAccountRole", roleName)}
}

func (_c *mockDataAccessRepository_GetGrantsOfAccountRole_Call) Run(run func(roleName string)) *mockDataAccessRepository_GetGrantsOfAccountRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetGrantsOfAccountRole_Call) Return(_a0 []GrantOfRole, _a1 error) *mockDataAccessRepository_GetGrantsOfAccountRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetGrantsOfAccountRole_Call) RunAndReturn(run func(string) ([]GrantOfRole, error)) *mockDataAccessRepository_GetGrantsOfAccountRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetGrantsOfDatabaseRole provides a mock function with given fields: database, roleName
func (_m *mockDataAccessRepository) GetGrantsOfDatabaseRole(database string, roleName string) ([]GrantOfRole, error) {
	ret := _m.Called(database, roleName)

	if len(ret) == 0 {
		panic("no return value specified for GetGrantsOfDatabaseRole")
	}

	var r0 []GrantOfRole
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]GrantOfRole, error)); ok {
		return rf(database, roleName)
	}
	if rf, ok := ret.Get(0).(func(string, string) []GrantOfRole); ok {
		r0 = rf(database, roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GrantOfRole)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(database, roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetGrantsOfDatabaseRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGrantsOfDatabaseRole'
type mockDataAccessRepository_GetGrantsOfDatabaseRole_Call struct {
	*mock.Call
}

// GetGrantsOfDatabaseRole is a helper method to define mock.On call
//   - database string
//   - roleName string
func (_e *mockDataAccessRepository_Expecter) GetGrantsOfDatabaseRole(database interface{}, roleName interface{}) *mockDataAccessRepository_GetGrantsOfDatabaseRole_Call {
	return &mockDataAccessRepository_GetGrantsOfDatabaseRole_Call{Call: _e.mock.On("GetGrantsOfDatabaseRole", database, roleName)}
}

func (_c *mockDataAccessRepository_GetGrantsOfDatabaseRole_Call) Run(run func(database string, roleName string)) *mockDataAccessRepository_GetGrantsOfDatabaseRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetGrantsOfDatabaseRole_Call) Return(_a0 []GrantOfRole, _a1 error) *mockDataAccessRepository_GetGrantsOfDatabaseRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetGrantsOfDatabaseRole_Call) RunAndReturn(run func(string, string) ([]GrantOfRole, error)) *mockDataAccessRepository_GetGrantsOfDatabaseRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetGrantsToAccountRole provides a mock function with given fields: roleName
func (_m *mockDataAccessRepository) GetGrantsToAccountRole(roleName string) ([]GrantToRole, error) {
	ret := _m.Called(roleName)

	if len(ret) == 0 {
		panic("no return value specified for GetGrantsToAccountRole")
	}

	var r0 []GrantToRole
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]GrantToRole, error)); ok {
		return rf(roleName)
	}
	if rf, ok := ret.Get(0).(func(string) []GrantToRole); ok {
		r0 = rf(roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GrantToRole)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetGrantsToAccountRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGrantsToAccountRole'
type mockDataAccessRepository_GetGrantsToAccountRole_Call struct {
	*mock.Call
}

// GetGrantsToAccountRole is a helper method to define mock.On call
//   - roleName string
func (_e *mockDataAccessRepository_Expecter) GetGrantsToAccountRole(roleName interface{}) *mockDataAccessRepository_GetGrantsToAccountRole_Call {
	return &mockDataAccessRepository_GetGrantsToAccountRole_Call{Call: _e.mock.On("GetGrantsToAccountRole", roleName)}
}

func (_c *mockDataAccessRepository_GetGrantsToAccountRole_Call) Run(run func(roleName string)) *mockDataAccessRepository_GetGrantsToAccountRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetGrantsToAccountRole_Call) Return(_a0 []GrantToRole, _a1 error) *mockDataAccessRepository_GetGrantsToAccountRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetGrantsToAccountRole_Call) RunAndReturn(run func(string) ([]GrantToRole, error)) *mockDataAccessRepository_GetGrantsToAccountRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetGrantsToDatabaseRole provides a mock function with given fields: database, roleName
func (_m *mockDataAccessRepository) GetGrantsToDatabaseRole(database string, roleName string) ([]GrantToRole, error) {
	ret := _m.Called(database, roleName)

	if len(ret) == 0 {
		panic("no return value specified for GetGrantsToDatabaseRole")
	}

	var r0 []GrantToRole
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]GrantToRole, error)); ok {
		return rf(database, roleName)
	}
	if rf, ok := ret.Get(0).(func(string, string) []GrantToRole); ok {
		r0 = rf(database, roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GrantToRole)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(database, roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetGrantsToDatabaseRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGrantsToDatabaseRole'
type mockDataAccessRepository_GetGrantsToDatabaseRole_Call struct {
	*mock.Call
}

// GetGrantsToDatabaseRole is a helper method to define mock.On call
//   - database string
//   - roleName string
func (_e *mockDataAccessRepository_Expecter) GetGrantsToDatabaseRole(database interface{}, roleName interface{}) *mockDataAccessRepository_GetGrantsToDatabaseRole_Call {
	return &mockDataAccessRepository_GetGrantsToDatabaseRole_Call{Call: _e.mock.On("GetGrantsToDatabaseRole", database, roleName)}
}

func (_c *mockDataAccessRepository_GetGrantsToDatabaseRole_Call) Run(run func(database string, roleName string)) *mockDataAccessRepository_GetGrantsToDatabaseRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetGrantsToDatabaseRole_Call) Return(_a0 []GrantToRole, _a1 error) *mockDataAccessRepository_GetGrantsToDatabaseRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetGrantsToDatabaseRole_Call) RunAndReturn(run func(string, string) ([]GrantToRole, error)) *mockDataAccessRepository_GetGrantsToDatabaseRole_Call {
	_c.Call.Return(run)
	return _c
}

// GetGrantsToShare provides a mock function with given fields: shareName
func (_m *mockDataAccessRepository) GetGrantsToShare(shareName string) ([]GrantToRole, error) {
	ret := _m.Called(shareName)

	if len(ret) == 0 {
		panic("no return value specified for GetGrantsToShare")
	}

	var r0 []GrantToRole
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]GrantToRole, error)); ok {
		return rf(shareName)
	}
	if rf, ok := ret.Get(0).(func(string) []GrantToRole); ok {
		r0 = rf(shareName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]GrantToRole)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(shareName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetGrantsToShare_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGrantsToShare'
type mockDataAccessRepository_GetGrantsToShare_Call struct {
	*mock.Call
}

// GetGrantsToShare is a helper method to define mock.On call
//   - shareName string
func (_e *mockDataAccessRepository_Expecter) GetGrantsToShare(shareName interface{}) *mockDataAccessRepository_GetGrantsToShare_Call {
	return &mockDataAccessRepository_GetGrantsToShare_Call{Call: _e.mock.On("GetGrantsToShare", shareName)}
}

func (_c *mockDataAccessRepository_GetGrantsToShare_Call) Run(run func(shareName string)) *mockDataAccessRepository_GetGrantsToShare_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetGrantsToShare_Call) Return(_a0 []GrantToRole, _a1 error) *mockDataAccessRepository_GetGrantsToShare_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetGrantsToShare_Call) RunAndReturn(run func(string) ([]GrantToRole, error)) *mockDataAccessRepository_GetGrantsToShare_Call {
	_c.Call.Return(run)
	return _c
}

// GetInboundShares provides a mock function with no fields
func (_m *mockDataAccessRepository) GetInboundShares() ([]DbEntity, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInboundShares")
	}

	var r0 []DbEntity
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]DbEntity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []DbEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DbEntity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetInboundShares_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInboundShares'
type mockDataAccessRepository_GetInboundShares_Call struct {
	*mock.Call
}

// GetInboundShares is a helper method to define mock.On call
func (_e *mockDataAccessRepository_Expecter) GetInboundShares() *mockDataAccessRepository_GetInboundShares_Call {
	return &mockDataAccessRepository_GetInboundShares_Call{Call: _e.mock.On("GetInboundShares")}
}

func (_c *mockDataAccessRepository_GetInboundShares_Call) Run(run func()) *mockDataAccessRepository_GetInboundShares_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataAccessRepository_GetInboundShares_Call) Return(_a0 []DbEntity, _a1 error) *mockDataAccessRepository_GetInboundShares_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetInboundShares_Call) RunAndReturn(run func() ([]DbEntity, error)) *mockDataAccessRepository_GetInboundShares_Call {
	_c.Call.Return(run)
	return _c
}

// GetOutboundShares provides a mock function with no fields
func (_m *mockDataAccessRepository) GetOutboundShares() ([]ShareEntity, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetOutboundShares")
	}

	var r0 []ShareEntity
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]ShareEntity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []ShareEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ShareEntity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetOutboundShares_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOutboundShares'
type mockDataAccessRepository_GetOutboundShares_Call struct {
	*mock.Call
}

// GetOutboundShares is a helper method to define mock.On call
func (_e *mockDataAccessRepository_Expecter) GetOutboundShares() *mockDataAccessRepository_GetOutboundShares_Call {
	return &mockDataAccessRepository_GetOutboundShares_Call{Call: _e.mock.On("GetOutboundShares")}
}

func (_c *mockDataAccessRepository_GetOutboundShares_Call) Run(run func()) *mockDataAccessRepository_GetOutboundShares_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataAccessRepository_GetOutboundShares_Call) Return(_a0 []ShareEntity, _a1 error) *mockDataAccessRepository_GetOutboundShares_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetOutboundShares_Call) RunAndReturn(run func() ([]ShareEntity, error)) *mockDataAccessRepository_GetOutboundShares_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicies provides a mock function with given fields: policy
func (_m *mockDataAccessRepository) GetPolicies(policy string) ([]PolicyEntity, error) {
	ret := _m.Called(policy)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicies")
	}

	var r0 []PolicyEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]PolicyEntity, error)); ok {
		return rf(policy)
	}
	if rf, ok := ret.Get(0).(func(string) []PolicyEntity); ok {
		r0 = rf(policy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]PolicyEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(policy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetPolicies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicies'
type mockDataAccessRepository_GetPolicies_Call struct {
	*mock.Call
}

// GetPolicies is a helper method to define mock.On call
//   - policy string
func (_e *mockDataAccessRepository_Expecter) GetPolicies(policy interface{}) *mockDataAccessRepository_GetPolicies_Call {
	return &mockDataAccessRepository_GetPolicies_Call{Call: _e.mock.On("GetPolicies", policy)}
}

func (_c *mockDataAccessRepository_GetPolicies_Call) Run(run func(policy string)) *mockDataAccessRepository_GetPolicies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetPolicies_Call) Return(_a0 []PolicyEntity, _a1 error) *mockDataAccessRepository_GetPolicies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetPolicies_Call) RunAndReturn(run func(string) ([]PolicyEntity, error)) *mockDataAccessRepository_GetPolicies_Call {
	_c.Call.Return(run)
	return _c
}

// GetPoliciesLike provides a mock function with given fields: policy, like
func (_m *mockDataAccessRepository) GetPoliciesLike(policy string, like string) ([]PolicyEntity, error) {
	ret := _m.Called(policy, like)

	if len(ret) == 0 {
		panic("no return value specified for GetPoliciesLike")
	}

	var r0 []PolicyEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]PolicyEntity, error)); ok {
		return rf(policy, like)
	}
	if rf, ok := ret.Get(0).(func(string, string) []PolicyEntity); ok {
		r0 = rf(policy, like)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]PolicyEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(policy, like)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetPoliciesLike_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPoliciesLike'
type mockDataAccessRepository_GetPoliciesLike_Call struct {
	*mock.Call
}

// GetPoliciesLike is a helper method to define mock.On call
//   - policy string
//   - like string
func (_e *mockDataAccessRepository_Expecter) GetPoliciesLike(policy interface{}, like interface{}) *mockDataAccessRepository_GetPoliciesLike_Call {
	return &mockDataAccessRepository_GetPoliciesLike_Call{Call: _e.mock.On("GetPoliciesLike", policy, like)}
}

func (_c *mockDataAccessRepository_GetPoliciesLike_Call) Run(run func(policy string, like string)) *mockDataAccessRepository_GetPoliciesLike_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetPoliciesLike_Call) Return(_a0 []PolicyEntity, _a1 error) *mockDataAccessRepository_GetPoliciesLike_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetPoliciesLike_Call) RunAndReturn(run func(string, string) ([]PolicyEntity, error)) *mockDataAccessRepository_GetPoliciesLike_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyReferences provides a mock function with given fields: dbName, schema, policyName
func (_m *mockDataAccessRepository) GetPolicyReferences(dbName string, schema string, policyName string) ([]PolicyReferenceEntity, error) {
	ret := _m.Called(dbName, schema, policyName)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicyReferences")
	}

	var r0 []PolicyReferenceEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]PolicyReferenceEntity, error)); ok {
		return rf(dbName, schema, policyName)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []PolicyReferenceEntity); ok {
		r0 = rf(dbName, schema, policyName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]PolicyReferenceEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(dbName, schema, policyName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetPolicyReferences_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyReferences'
type mockDataAccessRepository_GetPolicyReferences_Call struct {
	*mock.Call
}

// GetPolicyReferences is a helper method to define mock.On call
//   - dbName string
//   - schema string
//   - policyName string
func (_e *mockDataAccessRepository_Expecter) GetPolicyReferences(dbName interface{}, schema interface{}, policyName interface{}) *mockDataAccessRepository_GetPolicyReferences_Call {
	return &mockDataAccessRepository_GetPolicyReferences_Call{Call: _e.mock.On("GetPolicyReferences", dbName, schema, policyName)}
}

func (_c *mockDataAccessRepository_GetPolicyReferences_Call) Run(run func(dbName string, schema string, policyName string)) *mockDataAccessRepository_GetPolicyReferences_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetPolicyReferences_Call) Return(_a0 []PolicyReferenceEntity, _a1 error) *mockDataAccessRepository_GetPolicyReferences_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetPolicyReferences_Call) RunAndReturn(run func(string, string, string) ([]PolicyReferenceEntity, error)) *mockDataAccessRepository_GetPolicyReferences_Call {
	_c.Call.Return(run)
	return _c
}

// GetSchemasInDatabase provides a mock function with given fields: databaseName, handleEntity
func (_m *mockDataAccessRepository) GetSchemasInDatabase(databaseName string, handleEntity EntityHandler) error {
	ret := _m.Called(databaseName, handleEntity)

	if len(ret) == 0 {
		panic("no return value specified for GetSchemasInDatabase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, EntityHandler) error); ok {
		r0 = rf(databaseName, handleEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_GetSchemasInDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSchemasInDatabase'
type mockDataAccessRepository_GetSchemasInDatabase_Call struct {
	*mock.Call
}

// GetSchemasInDatabase is a helper method to define mock.On call
//   - databaseName string
//   - handleEntity EntityHandler
func (_e *mockDataAccessRepository_Expecter) GetSchemasInDatabase(databaseName interface{}, handleEntity interface{}) *mockDataAccessRepository_GetSchemasInDatabase_Call {
	return &mockDataAccessRepository_GetSchemasInDatabase_Call{Call: _e.mock.On("GetSchemasInDatabase", databaseName, handleEntity)}
}

func (_c *mockDataAccessRepository_GetSchemasInDatabase_Call) Run(run func(databaseName string, handleEntity EntityHandler)) *mockDataAccessRepository_GetSchemasInDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(EntityHandler))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetSchemasInDatabase_Call) Return(_a0 error) *mockDataAccessRepository_GetSchemasInDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_GetSchemasInDatabase_Call) RunAndReturn(run func(string, EntityHandler) error) *mockDataAccessRepository_GetSchemasInDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// GetSnowFlakeAccountName provides a mock function with given fields: ops
func (_m *mockDataAccessRepository) GetSnowFlakeAccountName(ops ...func(*GetSnowFlakeAccountNameOptions)) (string, error) {
	_va := make([]interface{}, len(ops))
	for _i := range ops {
		_va[_i] = ops[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSnowFlakeAccountName")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(...func(*GetSnowFlakeAccountNameOptions)) (string, error)); ok {
		return rf(ops...)
	}
	if rf, ok := ret.Get(0).(func(...func(*GetSnowFlakeAccountNameOptions)) string); ok {
		r0 = rf(ops...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(...func(*GetSnowFlakeAccountNameOptions)) error); ok {
		r1 = rf(ops...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetSnowFlakeAccountName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSnowFlakeAccountName'
type mockDataAccessRepository_GetSnowFlakeAccountName_Call struct {
	*mock.Call
}

// GetSnowFlakeAccountName is a helper method to define mock.On call
//   - ops ...func(*GetSnowFlakeAccountNameOptions)
func (_e *mockDataAccessRepository_Expecter) GetSnowFlakeAccountName(ops ...interface{}) *mockDataAccessRepository_GetSnowFlakeAccountName_Call {
	return &mockDataAccessRepository_GetSnowFlakeAccountName_Call{Call: _e.mock.On("GetSnowFlakeAccountName",
		append([]interface{}{}, ops...)...)}
}

func (_c *mockDataAccessRepository_GetSnowFlakeAccountName_Call) Run(run func(ops ...func(*GetSnowFlakeAccountNameOptions))) *mockDataAccessRepository_GetSnowFlakeAccountName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]func(*GetSnowFlakeAccountNameOptions), len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(func(*GetSnowFlakeAccountNameOptions))
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessRepository_GetSnowFlakeAccountName_Call) Return(_a0 string, _a1 error) *mockDataAccessRepository_GetSnowFlakeAccountName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetSnowFlakeAccountName_Call) RunAndReturn(run func(...func(*GetSnowFlakeAccountNameOptions)) (string, error)) *mockDataAccessRepository_GetSnowFlakeAccountName_Call {
	_c.Call.Return(run)
	return _c
}

// GetTablesInDatabase provides a mock function with given fields: databaseName, schemaName, handleEntity
func (_m *mockDataAccessRepository) GetTablesInDatabase(databaseName string, schemaName string, handleEntity EntityHandler) error {
	ret := _m.Called(databaseName, schemaName, handleEntity)

	if len(ret) == 0 {
		panic("no return value specified for GetTablesInDatabase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, EntityHandler) error); ok {
		r0 = rf(databaseName, schemaName, handleEntity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_GetTablesInDatabase_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTablesInDatabase'
type mockDataAccessRepository_GetTablesInDatabase_Call struct {
	*mock.Call
}

// GetTablesInDatabase is a helper method to define mock.On call
//   - databaseName string
//   - schemaName string
//   - handleEntity EntityHandler
func (_e *mockDataAccessRepository_Expecter) GetTablesInDatabase(databaseName interface{}, schemaName interface{}, handleEntity interface{}) *mockDataAccessRepository_GetTablesInDatabase_Call {
	return &mockDataAccessRepository_GetTablesInDatabase_Call{Call: _e.mock.On("GetTablesInDatabase", databaseName, schemaName, handleEntity)}
}

func (_c *mockDataAccessRepository_GetTablesInDatabase_Call) Run(run func(databaseName string, schemaName string, handleEntity EntityHandler)) *mockDataAccessRepository_GetTablesInDatabase_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(EntityHandler))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetTablesInDatabase_Call) Return(_a0 error) *mockDataAccessRepository_GetTablesInDatabase_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_GetTablesInDatabase_Call) RunAndReturn(run func(string, string, EntityHandler) error) *mockDataAccessRepository_GetTablesInDatabase_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagsByDomain provides a mock function with given fields: domain
func (_m *mockDataAccessRepository) GetTagsByDomain(domain string) (map[string][]*tag.Tag, error) {
	ret := _m.Called(domain)

	if len(ret) == 0 {
		panic("no return value specified for GetTagsByDomain")
	}

	var r0 map[string][]*tag.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string][]*tag.Tag, error)); ok {
		return rf(domain)
	}
	if rf, ok := ret.Get(0).(func(string) map[string][]*tag.Tag); ok {
		r0 = rf(domain)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]*tag.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetTagsByDomain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagsByDomain'
type mockDataAccessRepository_GetTagsByDomain_Call struct {
	*mock.Call
}

// GetTagsByDomain is a helper method to define mock.On call
//   - domain string
func (_e *mockDataAccessRepository_Expecter) GetTagsByDomain(domain interface{}) *mockDataAccessRepository_GetTagsByDomain_Call {
	return &mockDataAccessRepository_GetTagsByDomain_Call{Call: _e.mock.On("GetTagsByDomain", domain)}
}

func (_c *mockDataAccessRepository_GetTagsByDomain_Call) Run(run func(domain string)) *mockDataAccessRepository_GetTagsByDomain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetTagsByDomain_Call) Return(_a0 map[string][]*tag.Tag, _a1 error) *mockDataAccessRepository_GetTagsByDomain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetTagsByDomain_Call) RunAndReturn(run func(string) (map[string][]*tag.Tag, error)) *mockDataAccessRepository_GetTagsByDomain_Call {
	_c.Call.Return(run)
	return _c
}

// GetTagsLinkedToDatabaseName provides a mock function with given fields: databaseName
func (_m *mockDataAccessRepository) GetTagsLinkedToDatabaseName(databaseName string) (map[string][]*tag.Tag, error) {
	ret := _m.Called(databaseName)

	if len(ret) == 0 {
		panic("no return value specified for GetTagsLinkedToDatabaseName")
	}

	var r0 map[string][]*tag.Tag
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (map[string][]*tag.Tag, error)); ok {
		return rf(databaseName)
	}
	if rf, ok := ret.Get(0).(func(string) map[string][]*tag.Tag); ok {
		r0 = rf(databaseName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]*tag.Tag)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(databaseName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetTagsLinkedToDatabaseName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTagsLinkedToDatabaseName'
type mockDataAccessRepository_GetTagsLinkedToDatabaseName_Call struct {
	*mock.Call
}

// GetTagsLinkedToDatabaseName is a helper method to define mock.On call
//   - databaseName string
func (_e *mockDataAccessRepository_Expecter) GetTagsLinkedToDatabaseName(databaseName interface{}) *mockDataAccessRepository_GetTagsLinkedToDatabaseName_Call {
	return &mockDataAccessRepository_GetTagsLinkedToDatabaseName_Call{Call: _e.mock.On("GetTagsLinkedToDatabaseName", databaseName)}
}

func (_c *mockDataAccessRepository_GetTagsLinkedToDatabaseName_Call) Run(run func(databaseName string)) *mockDataAccessRepository_GetTagsLinkedToDatabaseName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_GetTagsLinkedToDatabaseName_Call) Return(_a0 map[string][]*tag.Tag, _a1 error) *mockDataAccessRepository_GetTagsLinkedToDatabaseName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetTagsLinkedToDatabaseName_Call) RunAndReturn(run func(string) (map[string][]*tag.Tag, error)) *mockDataAccessRepository_GetTagsLinkedToDatabaseName_Call {
	_c.Call.Return(run)
	return _c
}

// GetWarehouses provides a mock function with no fields
func (_m *mockDataAccessRepository) GetWarehouses() ([]DbEntity, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetWarehouses")
	}

	var r0 []DbEntity
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]DbEntity, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []DbEntity); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]DbEntity)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockDataAccessRepository_GetWarehouses_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWarehouses'
type mockDataAccessRepository_GetWarehouses_Call struct {
	*mock.Call
}

// GetWarehouses is a helper method to define mock.On call
func (_e *mockDataAccessRepository_Expecter) GetWarehouses() *mockDataAccessRepository_GetWarehouses_Call {
	return &mockDataAccessRepository_GetWarehouses_Call{Call: _e.mock.On("GetWarehouses")}
}

func (_c *mockDataAccessRepository_GetWarehouses_Call) Run(run func()) *mockDataAccessRepository_GetWarehouses_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataAccessRepository_GetWarehouses_Call) Return(_a0 []DbEntity, _a1 error) *mockDataAccessRepository_GetWarehouses_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockDataAccessRepository_GetWarehouses_Call) RunAndReturn(run func() ([]DbEntity, error)) *mockDataAccessRepository_GetWarehouses_Call {
	_c.Call.Return(run)
	return _c
}

// GrantAccountRolesToAccountRole provides a mock function with given fields: ctx, role, roles
func (_m *mockDataAccessRepository) GrantAccountRolesToAccountRole(ctx context.Context, role string, roles ...string) error {
	_va := make([]interface{}, len(roles))
	for _i := range roles {
		_va[_i] = roles[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, role)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GrantAccountRolesToAccountRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) error); ok {
		r0 = rf(ctx, role, roles...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_GrantAccountRolesToAccountRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantAccountRolesToAccountRole'
type mockDataAccessRepository_GrantAccountRolesToAccountRole_Call struct {
	*mock.Call
}

// GrantAccountRolesToAccountRole is a helper method to define mock.On call
//   - ctx context.Context
//   - role string
//   - roles ...string
func (_e *mockDataAccessRepository_Expecter) GrantAccountRolesToAccountRole(ctx interface{}, role interface{}, roles ...interface{}) *mockDataAccessRepository_GrantAccountRolesToAccountRole_Call {
	return &mockDataAccessRepository_GrantAccountRolesToAccountRole_Call{Call: _e.mock.On("GrantAccountRolesToAccountRole",
		append([]interface{}{ctx, role}, roles...)...)}
}

func (_c *mockDataAccessRepository_GrantAccountRolesToAccountRole_Call) Run(run func(ctx context.Context, role string, roles ...string)) *mockDataAccessRepository_GrantAccountRolesToAccountRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessRepository_GrantAccountRolesToAccountRole_Call) Return(_a0 error) *mockDataAccessRepository_GrantAccountRolesToAccountRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_GrantAccountRolesToAccountRole_Call) RunAndReturn(run func(context.Context, string, ...string) error) *mockDataAccessRepository_GrantAccountRolesToAccountRole_Call {
	_c.Call.Return(run)
	return _c
}

// GrantAccountRolesToDatabaseRole provides a mock function with given fields: ctx, database, databaseRole, accountRoles
func (_m *mockDataAccessRepository) GrantAccountRolesToDatabaseRole(ctx context.Context, database string, databaseRole string, accountRoles ...string) error {
	_va := make([]interface{}, len(accountRoles))
	for _i := range accountRoles {
		_va[_i] = accountRoles[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, database, databaseRole)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GrantAccountRolesToDatabaseRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...string) error); ok {
		r0 = rf(ctx, database, databaseRole, accountRoles...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_GrantAccountRolesToDatabaseRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantAccountRolesToDatabaseRole'
type mockDataAccessRepository_GrantAccountRolesToDatabaseRole_Call struct {
	*mock.Call
}

// GrantAccountRolesToDatabaseRole is a helper method to define mock.On call
//   - ctx context.Context
//   - database string
//   - databaseRole string
//   - accountRoles ...string
func (_e *mockDataAccessRepository_Expecter) GrantAccountRolesToDatabaseRole(ctx interface{}, database interface{}, databaseRole interface{}, accountRoles ...interface{}) *mockDataAccessRepository_GrantAccountRolesToDatabaseRole_Call {
	return &mockDataAccessRepository_GrantAccountRolesToDatabaseRole_Call{Call: _e.mock.On("GrantAccountRolesToDatabaseRole",
		append([]interface{}{ctx, database, databaseRole}, accountRoles...)...)}
}

func (_c *mockDataAccessRepository_GrantAccountRolesToDatabaseRole_Call) Run(run func(ctx context.Context, database string, databaseRole string, accountRoles ...string)) *mockDataAccessRepository_GrantAccountRolesToDatabaseRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessRepository_GrantAccountRolesToDatabaseRole_Call) Return(_a0 error) *mockDataAccessRepository_GrantAccountRolesToDatabaseRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_GrantAccountRolesToDatabaseRole_Call) RunAndReturn(run func(context.Context, string, string, ...string) error) *mockDataAccessRepository_GrantAccountRolesToDatabaseRole_Call {
	_c.Call.Return(run)
	return _c
}

// GrantDatabaseRolesToDatabaseRole provides a mock function with given fields: ctx, database, databaseRole, databaseRoles
func (_m *mockDataAccessRepository) GrantDatabaseRolesToDatabaseRole(ctx context.Context, database string, databaseRole string, databaseRoles ...string) error {
	_va := make([]interface{}, len(databaseRoles))
	for _i := range databaseRoles {
		_va[_i] = databaseRoles[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, database, databaseRole)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GrantDatabaseRolesToDatabaseRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...string) error); ok {
		r0 = rf(ctx, database, databaseRole, databaseRoles...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_GrantDatabaseRolesToDatabaseRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantDatabaseRolesToDatabaseRole'
type mockDataAccessRepository_GrantDatabaseRolesToDatabaseRole_Call struct {
	*mock.Call
}

// GrantDatabaseRolesToDatabaseRole is a helper method to define mock.On call
//   - ctx context.Context
//   - database string
//   - databaseRole string
//   - databaseRoles ...string
func (_e *mockDataAccessRepository_Expecter) GrantDatabaseRolesToDatabaseRole(ctx interface{}, database interface{}, databaseRole interface{}, databaseRoles ...interface{}) *mockDataAccessRepository_GrantDatabaseRolesToDatabaseRole_Call {
	return &mockDataAccessRepository_GrantDatabaseRolesToDatabaseRole_Call{Call: _e.mock.On("GrantDatabaseRolesToDatabaseRole",
		append([]interface{}{ctx, database, databaseRole}, databaseRoles...)...)}
}

func (_c *mockDataAccessRepository_GrantDatabaseRolesToDatabaseRole_Call) Run(run func(ctx context.Context, database string, databaseRole string, databaseRoles ...string)) *mockDataAccessRepository_GrantDatabaseRolesToDatabaseRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessRepository_GrantDatabaseRolesToDatabaseRole_Call) Return(_a0 error) *mockDataAccessRepository_GrantDatabaseRolesToDatabaseRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_GrantDatabaseRolesToDatabaseRole_Call) RunAndReturn(run func(context.Context, string, string, ...string) error) *mockDataAccessRepository_GrantDatabaseRolesToDatabaseRole_Call {
	_c.Call.Return(run)
	return _c
}

// GrantSharesToDatabaseRole provides a mock function with given fields: ctx, database, databaseRole, shares
func (_m *mockDataAccessRepository) GrantSharesToDatabaseRole(ctx context.Context, database string, databaseRole string, shares ...string) error {
	_va := make([]interface{}, len(shares))
	for _i := range shares {
		_va[_i] = shares[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, database, databaseRole)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GrantSharesToDatabaseRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...string) error); ok {
		r0 = rf(ctx, database, databaseRole, shares...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_GrantSharesToDatabaseRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantSharesToDatabaseRole'
type mockDataAccessRepository_GrantSharesToDatabaseRole_Call struct {
	*mock.Call
}

// GrantSharesToDatabaseRole is a helper method to define mock.On call
//   - ctx context.Context
//   - database string
//   - databaseRole string
//   - shares ...string
func (_e *mockDataAccessRepository_Expecter) GrantSharesToDatabaseRole(ctx interface{}, database interface{}, databaseRole interface{}, shares ...interface{}) *mockDataAccessRepository_GrantSharesToDatabaseRole_Call {
	return &mockDataAccessRepository_GrantSharesToDatabaseRole_Call{Call: _e.mock.On("GrantSharesToDatabaseRole",
		append([]interface{}{ctx, database, databaseRole}, shares...)...)}
}

func (_c *mockDataAccessRepository_GrantSharesToDatabaseRole_Call) Run(run func(ctx context.Context, database string, databaseRole string, shares ...string)) *mockDataAccessRepository_GrantSharesToDatabaseRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessRepository_GrantSharesToDatabaseRole_Call) Return(_a0 error) *mockDataAccessRepository_GrantSharesToDatabaseRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_GrantSharesToDatabaseRole_Call) RunAndReturn(run func(context.Context, string, string, ...string) error) *mockDataAccessRepository_GrantSharesToDatabaseRole_Call {
	_c.Call.Return(run)
	return _c
}

// GrantUsersToAccountRole provides a mock function with given fields: ctx, role, users
func (_m *mockDataAccessRepository) GrantUsersToAccountRole(ctx context.Context, role string, users ...string) error {
	_va := make([]interface{}, len(users))
	for _i := range users {
		_va[_i] = users[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, role)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GrantUsersToAccountRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) error); ok {
		r0 = rf(ctx, role, users...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_GrantUsersToAccountRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantUsersToAccountRole'
type mockDataAccessRepository_GrantUsersToAccountRole_Call struct {
	*mock.Call
}

// GrantUsersToAccountRole is a helper method to define mock.On call
//   - ctx context.Context
//   - role string
//   - users ...string
func (_e *mockDataAccessRepository_Expecter) GrantUsersToAccountRole(ctx interface{}, role interface{}, users ...interface{}) *mockDataAccessRepository_GrantUsersToAccountRole_Call {
	return &mockDataAccessRepository_GrantUsersToAccountRole_Call{Call: _e.mock.On("GrantUsersToAccountRole",
		append([]interface{}{ctx, role}, users...)...)}
}

func (_c *mockDataAccessRepository_GrantUsersToAccountRole_Call) Run(run func(ctx context.Context, role string, users ...string)) *mockDataAccessRepository_GrantUsersToAccountRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessRepository_GrantUsersToAccountRole_Call) Return(_a0 error) *mockDataAccessRepository_GrantUsersToAccountRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_GrantUsersToAccountRole_Call) RunAndReturn(run func(context.Context, string, ...string) error) *mockDataAccessRepository_GrantUsersToAccountRole_Call {
	_c.Call.Return(run)
	return _c
}

// RenameAccountRole provides a mock function with given fields: oldName, newName
func (_m *mockDataAccessRepository) RenameAccountRole(oldName string, newName string) error {
	ret := _m.Called(oldName, newName)

	if len(ret) == 0 {
		panic("no return value specified for RenameAccountRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(oldName, newName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_RenameAccountRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameAccountRole'
type mockDataAccessRepository_RenameAccountRole_Call struct {
	*mock.Call
}

// RenameAccountRole is a helper method to define mock.On call
//   - oldName string
//   - newName string
func (_e *mockDataAccessRepository_Expecter) RenameAccountRole(oldName interface{}, newName interface{}) *mockDataAccessRepository_RenameAccountRole_Call {
	return &mockDataAccessRepository_RenameAccountRole_Call{Call: _e.mock.On("RenameAccountRole", oldName, newName)}
}

func (_c *mockDataAccessRepository_RenameAccountRole_Call) Run(run func(oldName string, newName string)) *mockDataAccessRepository_RenameAccountRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_RenameAccountRole_Call) Return(_a0 error) *mockDataAccessRepository_RenameAccountRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_RenameAccountRole_Call) RunAndReturn(run func(string, string) error) *mockDataAccessRepository_RenameAccountRole_Call {
	_c.Call.Return(run)
	return _c
}

// RenameDatabaseRole provides a mock function with given fields: database, oldName, newName
func (_m *mockDataAccessRepository) RenameDatabaseRole(database string, oldName string, newName string) error {
	ret := _m.Called(database, oldName, newName)

	if len(ret) == 0 {
		panic("no return value specified for RenameDatabaseRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(database, oldName, newName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_RenameDatabaseRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RenameDatabaseRole'
type mockDataAccessRepository_RenameDatabaseRole_Call struct {
	*mock.Call
}

// RenameDatabaseRole is a helper method to define mock.On call
//   - database string
//   - oldName string
//   - newName string
func (_e *mockDataAccessRepository_Expecter) RenameDatabaseRole(database interface{}, oldName interface{}, newName interface{}) *mockDataAccessRepository_RenameDatabaseRole_Call {
	return &mockDataAccessRepository_RenameDatabaseRole_Call{Call: _e.mock.On("RenameDatabaseRole", database, oldName, newName)}
}

func (_c *mockDataAccessRepository_RenameDatabaseRole_Call) Run(run func(database string, oldName string, newName string)) *mockDataAccessRepository_RenameDatabaseRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_RenameDatabaseRole_Call) Return(_a0 error) *mockDataAccessRepository_RenameDatabaseRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_RenameDatabaseRole_Call) RunAndReturn(run func(string, string, string) error) *mockDataAccessRepository_RenameDatabaseRole_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeAccountRolesFromAccountRole provides a mock function with given fields: ctx, role, roles
func (_m *mockDataAccessRepository) RevokeAccountRolesFromAccountRole(ctx context.Context, role string, roles ...string) error {
	_va := make([]interface{}, len(roles))
	for _i := range roles {
		_va[_i] = roles[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, role)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAccountRolesFromAccountRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) error); ok {
		r0 = rf(ctx, role, roles...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_RevokeAccountRolesFromAccountRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeAccountRolesFromAccountRole'
type mockDataAccessRepository_RevokeAccountRolesFromAccountRole_Call struct {
	*mock.Call
}

// RevokeAccountRolesFromAccountRole is a helper method to define mock.On call
//   - ctx context.Context
//   - role string
//   - roles ...string
func (_e *mockDataAccessRepository_Expecter) RevokeAccountRolesFromAccountRole(ctx interface{}, role interface{}, roles ...interface{}) *mockDataAccessRepository_RevokeAccountRolesFromAccountRole_Call {
	return &mockDataAccessRepository_RevokeAccountRolesFromAccountRole_Call{Call: _e.mock.On("RevokeAccountRolesFromAccountRole",
		append([]interface{}{ctx, role}, roles...)...)}
}

func (_c *mockDataAccessRepository_RevokeAccountRolesFromAccountRole_Call) Run(run func(ctx context.Context, role string, roles ...string)) *mockDataAccessRepository_RevokeAccountRolesFromAccountRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessRepository_RevokeAccountRolesFromAccountRole_Call) Return(_a0 error) *mockDataAccessRepository_RevokeAccountRolesFromAccountRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_RevokeAccountRolesFromAccountRole_Call) RunAndReturn(run func(context.Context, string, ...string) error) *mockDataAccessRepository_RevokeAccountRolesFromAccountRole_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeAccountRolesFromDatabaseRole provides a mock function with given fields: ctx, database, databaseRole, accountRoles
func (_m *mockDataAccessRepository) RevokeAccountRolesFromDatabaseRole(ctx context.Context, database string, databaseRole string, accountRoles ...string) error {
	_va := make([]interface{}, len(accountRoles))
	for _i := range accountRoles {
		_va[_i] = accountRoles[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, database, databaseRole)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RevokeAccountRolesFromDatabaseRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...string) error); ok {
		r0 = rf(ctx, database, databaseRole, accountRoles...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_RevokeAccountRolesFromDatabaseRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeAccountRolesFromDatabaseRole'
type mockDataAccessRepository_RevokeAccountRolesFromDatabaseRole_Call struct {
	*mock.Call
}

// RevokeAccountRolesFromDatabaseRole is a helper method to define mock.On call
//   - ctx context.Context
//   - database string
//   - databaseRole string
//   - accountRoles ...string
func (_e *mockDataAccessRepository_Expecter) RevokeAccountRolesFromDatabaseRole(ctx interface{}, database interface{}, databaseRole interface{}, accountRoles ...interface{}) *mockDataAccessRepository_RevokeAccountRolesFromDatabaseRole_Call {
	return &mockDataAccessRepository_RevokeAccountRolesFromDatabaseRole_Call{Call: _e.mock.On("RevokeAccountRolesFromDatabaseRole",
		append([]interface{}{ctx, database, databaseRole}, accountRoles...)...)}
}

func (_c *mockDataAccessRepository_RevokeAccountRolesFromDatabaseRole_Call) Run(run func(ctx context.Context, database string, databaseRole string, accountRoles ...string)) *mockDataAccessRepository_RevokeAccountRolesFromDatabaseRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessRepository_RevokeAccountRolesFromDatabaseRole_Call) Return(_a0 error) *mockDataAccessRepository_RevokeAccountRolesFromDatabaseRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_RevokeAccountRolesFromDatabaseRole_Call) RunAndReturn(run func(context.Context, string, string, ...string) error) *mockDataAccessRepository_RevokeAccountRolesFromDatabaseRole_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeDatabaseRolesFromDatabaseRole provides a mock function with given fields: ctx, database, databaseRole, databaseRoles
func (_m *mockDataAccessRepository) RevokeDatabaseRolesFromDatabaseRole(ctx context.Context, database string, databaseRole string, databaseRoles ...string) error {
	_va := make([]interface{}, len(databaseRoles))
	for _i := range databaseRoles {
		_va[_i] = databaseRoles[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, database, databaseRole)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RevokeDatabaseRolesFromDatabaseRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...string) error); ok {
		r0 = rf(ctx, database, databaseRole, databaseRoles...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_RevokeDatabaseRolesFromDatabaseRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeDatabaseRolesFromDatabaseRole'
type mockDataAccessRepository_RevokeDatabaseRolesFromDatabaseRole_Call struct {
	*mock.Call
}

// RevokeDatabaseRolesFromDatabaseRole is a helper method to define mock.On call
//   - ctx context.Context
//   - database string
//   - databaseRole string
//   - databaseRoles ...string
func (_e *mockDataAccessRepository_Expecter) RevokeDatabaseRolesFromDatabaseRole(ctx interface{}, database interface{}, databaseRole interface{}, databaseRoles ...interface{}) *mockDataAccessRepository_RevokeDatabaseRolesFromDatabaseRole_Call {
	return &mockDataAccessRepository_RevokeDatabaseRolesFromDatabaseRole_Call{Call: _e.mock.On("RevokeDatabaseRolesFromDatabaseRole",
		append([]interface{}{ctx, database, databaseRole}, databaseRoles...)...)}
}

func (_c *mockDataAccessRepository_RevokeDatabaseRolesFromDatabaseRole_Call) Run(run func(ctx context.Context, database string, databaseRole string, databaseRoles ...string)) *mockDataAccessRepository_RevokeDatabaseRolesFromDatabaseRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessRepository_RevokeDatabaseRolesFromDatabaseRole_Call) Return(_a0 error) *mockDataAccessRepository_RevokeDatabaseRolesFromDatabaseRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_RevokeDatabaseRolesFromDatabaseRole_Call) RunAndReturn(run func(context.Context, string, string, ...string) error) *mockDataAccessRepository_RevokeDatabaseRolesFromDatabaseRole_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeSharesFromDatabaseRole provides a mock function with given fields: ctx, database, databaseRole, shares
func (_m *mockDataAccessRepository) RevokeSharesFromDatabaseRole(ctx context.Context, database string, databaseRole string, shares ...string) error {
	_va := make([]interface{}, len(shares))
	for _i := range shares {
		_va[_i] = shares[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, database, databaseRole)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RevokeSharesFromDatabaseRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, ...string) error); ok {
		r0 = rf(ctx, database, databaseRole, shares...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_RevokeSharesFromDatabaseRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeSharesFromDatabaseRole'
type mockDataAccessRepository_RevokeSharesFromDatabaseRole_Call struct {
	*mock.Call
}

// RevokeSharesFromDatabaseRole is a helper method to define mock.On call
//   - ctx context.Context
//   - database string
//   - databaseRole string
//   - shares ...string
func (_e *mockDataAccessRepository_Expecter) RevokeSharesFromDatabaseRole(ctx interface{}, database interface{}, databaseRole interface{}, shares ...interface{}) *mockDataAccessRepository_RevokeSharesFromDatabaseRole_Call {
	return &mockDataAccessRepository_RevokeSharesFromDatabaseRole_Call{Call: _e.mock.On("RevokeSharesFromDatabaseRole",
		append([]interface{}{ctx, database, databaseRole}, shares...)...)}
}

func (_c *mockDataAccessRepository_RevokeSharesFromDatabaseRole_Call) Run(run func(ctx context.Context, database string, databaseRole string, shares ...string)) *mockDataAccessRepository_RevokeSharesFromDatabaseRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessRepository_RevokeSharesFromDatabaseRole_Call) Return(_a0 error) *mockDataAccessRepository_RevokeSharesFromDatabaseRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_RevokeSharesFromDatabaseRole_Call) RunAndReturn(run func(context.Context, string, string, ...string) error) *mockDataAccessRepository_RevokeSharesFromDatabaseRole_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeUsersFromAccountRole provides a mock function with given fields: ctx, role, users
func (_m *mockDataAccessRepository) RevokeUsersFromAccountRole(ctx context.Context, role string, users ...string) error {
	_va := make([]interface{}, len(users))
	for _i := range users {
		_va[_i] = users[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, role)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RevokeUsersFromAccountRole")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) error); ok {
		r0 = rf(ctx, role, users...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_RevokeUsersFromAccountRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeUsersFromAccountRole'
type mockDataAccessRepository_RevokeUsersFromAccountRole_Call struct {
	*mock.Call
}

// RevokeUsersFromAccountRole is a helper method to define mock.On call
//   - ctx context.Context
//   - role string
//   - users ...string
func (_e *mockDataAccessRepository_Expecter) RevokeUsersFromAccountRole(ctx interface{}, role interface{}, users ...interface{}) *mockDataAccessRepository_RevokeUsersFromAccountRole_Call {
	return &mockDataAccessRepository_RevokeUsersFromAccountRole_Call{Call: _e.mock.On("RevokeUsersFromAccountRole",
		append([]interface{}{ctx, role}, users...)...)}
}

func (_c *mockDataAccessRepository_RevokeUsersFromAccountRole_Call) Run(run func(ctx context.Context, role string, users ...string)) *mockDataAccessRepository_RevokeUsersFromAccountRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockDataAccessRepository_RevokeUsersFromAccountRole_Call) Return(_a0 error) *mockDataAccessRepository_RevokeUsersFromAccountRole_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_RevokeUsersFromAccountRole_Call) RunAndReturn(run func(context.Context, string, ...string) error) *mockDataAccessRepository_RevokeUsersFromAccountRole_Call {
	_c.Call.Return(run)
	return _c
}

// TotalQueryTime provides a mock function with no fields
func (_m *mockDataAccessRepository) TotalQueryTime() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TotalQueryTime")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// mockDataAccessRepository_TotalQueryTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalQueryTime'
type mockDataAccessRepository_TotalQueryTime_Call struct {
	*mock.Call
}

// TotalQueryTime is a helper method to define mock.On call
func (_e *mockDataAccessRepository_Expecter) TotalQueryTime() *mockDataAccessRepository_TotalQueryTime_Call {
	return &mockDataAccessRepository_TotalQueryTime_Call{Call: _e.mock.On("TotalQueryTime")}
}

func (_c *mockDataAccessRepository_TotalQueryTime_Call) Run(run func()) *mockDataAccessRepository_TotalQueryTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataAccessRepository_TotalQueryTime_Call) Return(_a0 time.Duration) *mockDataAccessRepository_TotalQueryTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_TotalQueryTime_Call) RunAndReturn(run func() time.Duration) *mockDataAccessRepository_TotalQueryTime_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFilter provides a mock function with given fields: databaseName, schema, tableName, filterName, argumentNames, expression
func (_m *mockDataAccessRepository) UpdateFilter(databaseName string, schema string, tableName string, filterName string, argumentNames []string, expression string) error {
	ret := _m.Called(databaseName, schema, tableName, filterName, argumentNames, expression)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFilter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, []string, string) error); ok {
		r0 = rf(databaseName, schema, tableName, filterName, argumentNames, expression)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataAccessRepository_UpdateFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFilter'
type mockDataAccessRepository_UpdateFilter_Call struct {
	*mock.Call
}

// UpdateFilter is a helper method to define mock.On call
//   - databaseName string
//   - schema string
//   - tableName string
//   - filterName string
//   - argumentNames []string
//   - expression string
func (_e *mockDataAccessRepository_Expecter) UpdateFilter(databaseName interface{}, schema interface{}, tableName interface{}, filterName interface{}, argumentNames interface{}, expression interface{}) *mockDataAccessRepository_UpdateFilter_Call {
	return &mockDataAccessRepository_UpdateFilter_Call{Call: _e.mock.On("UpdateFilter", databaseName, schema, tableName, filterName, argumentNames, expression)}
}

func (_c *mockDataAccessRepository_UpdateFilter_Call) Run(run func(databaseName string, schema string, tableName string, filterName string, argumentNames []string, expression string)) *mockDataAccessRepository_UpdateFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].([]string), args[5].(string))
	})
	return _c
}

func (_c *mockDataAccessRepository_UpdateFilter_Call) Return(_a0 error) *mockDataAccessRepository_UpdateFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataAccessRepository_UpdateFilter_Call) RunAndReturn(run func(string, string, string, string, []string, string) error) *mockDataAccessRepository_UpdateFilter_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDataAccessRepository creates a new instance of mockDataAccessRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDataAccessRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDataAccessRepository {
	mock := &mockDataAccessRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
