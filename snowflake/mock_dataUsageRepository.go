// Code generated by mockery v2.43.2. DO NOT EDIT.

package snowflake

import (
	context "context"

	stream "github.com/raito-io/cli-plugin-snowflake/common/stream"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// mockDataUsageRepository is an autogenerated mock type for the dataUsageRepository type
type mockDataUsageRepository struct {
	mock.Mock
}

type mockDataUsageRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *mockDataUsageRepository) EXPECT() *mockDataUsageRepository_Expecter {
	return &mockDataUsageRepository_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *mockDataUsageRepository) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockDataUsageRepository_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type mockDataUsageRepository_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *mockDataUsageRepository_Expecter) Close() *mockDataUsageRepository_Close_Call {
	return &mockDataUsageRepository_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *mockDataUsageRepository_Close_Call) Run(run func()) *mockDataUsageRepository_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataUsageRepository_Close_Call) Return(_a0 error) *mockDataUsageRepository_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataUsageRepository_Close_Call) RunAndReturn(run func() error) *mockDataUsageRepository_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetDataUsage provides a mock function with given fields: ctx, minTime, maxTime
func (_m *mockDataUsageRepository) GetDataUsage(ctx context.Context, minTime time.Time, maxTime *time.Time) <-chan stream.MaybeError[UsageQueryResult] {
	ret := _m.Called(ctx, minTime, maxTime)

	if len(ret) == 0 {
		panic("no return value specified for GetDataUsage")
	}

	var r0 <-chan stream.MaybeError[UsageQueryResult]
	if rf, ok := ret.Get(0).(func(context.Context, time.Time, *time.Time) <-chan stream.MaybeError[UsageQueryResult]); ok {
		r0 = rf(ctx, minTime, maxTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan stream.MaybeError[UsageQueryResult])
		}
	}

	return r0
}

// mockDataUsageRepository_GetDataUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDataUsage'
type mockDataUsageRepository_GetDataUsage_Call struct {
	*mock.Call
}

// GetDataUsage is a helper method to define mock.On call
//   - ctx context.Context
//   - minTime time.Time
//   - maxTime *time.Time
func (_e *mockDataUsageRepository_Expecter) GetDataUsage(ctx interface{}, minTime interface{}, maxTime interface{}) *mockDataUsageRepository_GetDataUsage_Call {
	return &mockDataUsageRepository_GetDataUsage_Call{Call: _e.mock.On("GetDataUsage", ctx, minTime, maxTime)}
}

func (_c *mockDataUsageRepository_GetDataUsage_Call) Run(run func(ctx context.Context, minTime time.Time, maxTime *time.Time)) *mockDataUsageRepository_GetDataUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Time), args[2].(*time.Time))
	})
	return _c
}

func (_c *mockDataUsageRepository_GetDataUsage_Call) Return(_a0 <-chan stream.MaybeError[UsageQueryResult]) *mockDataUsageRepository_GetDataUsage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataUsageRepository_GetDataUsage_Call) RunAndReturn(run func(context.Context, time.Time, *time.Time) <-chan stream.MaybeError[UsageQueryResult]) *mockDataUsageRepository_GetDataUsage_Call {
	_c.Call.Return(run)
	return _c
}

// TotalQueryTime provides a mock function with given fields:
func (_m *mockDataUsageRepository) TotalQueryTime() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for TotalQueryTime")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// mockDataUsageRepository_TotalQueryTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TotalQueryTime'
type mockDataUsageRepository_TotalQueryTime_Call struct {
	*mock.Call
}

// TotalQueryTime is a helper method to define mock.On call
func (_e *mockDataUsageRepository_Expecter) TotalQueryTime() *mockDataUsageRepository_TotalQueryTime_Call {
	return &mockDataUsageRepository_TotalQueryTime_Call{Call: _e.mock.On("TotalQueryTime")}
}

func (_c *mockDataUsageRepository_TotalQueryTime_Call) Run(run func()) *mockDataUsageRepository_TotalQueryTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockDataUsageRepository_TotalQueryTime_Call) Return(_a0 time.Duration) *mockDataUsageRepository_TotalQueryTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockDataUsageRepository_TotalQueryTime_Call) RunAndReturn(run func() time.Duration) *mockDataUsageRepository_TotalQueryTime_Call {
	_c.Call.Return(run)
	return _c
}

// newMockDataUsageRepository creates a new instance of mockDataUsageRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDataUsageRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDataUsageRepository {
	mock := &mockDataUsageRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
